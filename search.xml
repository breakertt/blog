<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A note on tricky Git commands</title>
      <link href="/2023/02/03/git_commands/"/>
      <url>/2023/02/03/git_commands/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Check the changes on a specific function [1]<br><code>git log -L :myfunction:path/to/myfile.c</code></li><li>Reset the commit date to the author date from a certian commit to latest commit<br><code>git filter-branch -f --env-filter &#39;export GIT_COMMITTER_DATE=&quot;$GIT_AUTHOR_DATE&quot;&#39; &lt;certian commit&gt;..HEAD</code><br>Refs:</li></ul><p>[1] <a href="https://stackoverflow.com/a/33953022" target="_blank" rel="noopener">https://stackoverflow.com/a/33953022</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wireguard iptables rules for Oracle VPS</title>
      <link href="/2023/02/03/wireguard_ipt_rules_oracle/"/>
      <url>/2023/02/03/wireguard_ipt_rules_oracle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Oracle VPS instance has a set of quite strong initial iptables rules for the safety of server, therefore we need to open the access from these new interafaces and ports, and also, insert these rules to the top of chains.</p><p>You can use follow rules in <code>/etc/wireguard/wg%i.conf</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PostUp &#x3D; iptables -I FORWARD 1 -i %i -o enp0s3 -j ACCEPT; iptables -I FORWARD 1 -i enp0s3 -o %i -j ACCEPT; iptables -I INPUT 1 -i enp0s3 -p udp --dport 51820 -j ACCEPT; iptables -I INPUT 1 -i %i -j ACCEPT; iptables -t nat -I POSTROUTING 1 -o enp0s3 -j MASQUERADE</span><br><span class="line">PostDown &#x3D; iptables -D FORWARD -i wg0 -o enp0s3 -j ACCEPT; iptables -D FORWARD -i enp0s3 -o wg0 -j ACCEPT; iptables -D INPUT -i enp0s3 -p udp --dport 51820 -i wg0 -j ACCEPT; iptables -D INPUT -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o enp0s3 -j MASQUERADE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Keep only one Gnome-Terminal instance (Ubuntu 22.04)</title>
      <link href="/2022/12/02/single_gnome_terminal/"/>
      <url>/2022/12/02/single_gnome_terminal/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Method-1-Remap-gnome-dock-shortcut"><a href="#Method-1-Remap-gnome-dock-shortcut" class="headerlink" title="Method 1 - Remap gnome dock shortcut"></a>Method 1 - Remap gnome dock shortcut</h1><ol><li>Add gnome-terminal into dock (favortie), I move it to the third application, please change the number <strong>3</strong> in following article to the number you used.</li><li>Disable terminal shortcut in <strong>Settings/Kebyaord/Keyboard Shortcuts</strong></li><li>Reset the shortcut to for start dock applications <code>gsettings set org.gnome.shell.keybindings switch-to-application-3 &quot;[&#39;&lt;Ctrl&gt;&lt;Alt&gt;T&#39;]&quot;</code></li></ol><h1 id="Method-2-Xorg-only-Reset-gnome-default-terminal"><a href="#Method-2-Xorg-only-Reset-gnome-default-terminal" class="headerlink" title="Method 2 (Xorg only) - Reset gnome default terminal"></a>Method 2 (Xorg only) - Reset gnome default terminal</h1><ol><li>Create a script at <code>~/bin/single_gnome_terminal.sh</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">SERVICE=<span class="string">'gnome-terminal'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ps ax | grep -v grep | grep <span class="variable">$SERVICE</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  wmctrl -xa <span class="variable">$SERVICE</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable">$SERVICE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Enable execution permission</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x ~/bin/single_gnome_terminal.sh`</span><br></pre></td></tr></table></figure><ol start="3"><li>Install <code>wmctrl</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wmctrl</span><br></pre></td></tr></table></figure><ol start="4"><li>Change default terminal</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.default-applications.terminal <span class="built_in">exec</span> single_gnome_terminal.sh</span><br></pre></td></tr></table></figure><p>References:</p><ol><li><a href="https://askubuntu.com/a/1194659" target="_blank" rel="noopener">https://askubuntu.com/a/1194659</a></li><li><a href="https://askubuntu.com/a/87109" target="_blank" rel="noopener">https://askubuntu.com/a/87109</a></li><li><a href="https://unix.stackexchange.com/a/510376" target="_blank" rel="noopener">https://unix.stackexchange.com/a/510376</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爱丁堡租房 tips</title>
      <link href="/2022/07/10/rent_ed/"/>
      <url>/2022/07/10/rent_ed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>“在爱丁堡租房比申请 PhD 还难”</p><a id="more"></a><h1 id="Apps-for-finding-properties"><a href="#Apps-for-finding-properties" class="headerlink" title="Apps for finding properties"></a>Apps for finding properties</h1><p>Zoopla, Rightmove, OpenRent, Citylets</p><h1 id="Bills"><a href="#Bills" class="headerlink" title="Bills"></a>Bills</h1><p>Council tax: free for students, need to register on the website<br>Water: free (included in the council tax)<br>Electricity &amp; Gas (keep the company previously used first, then switch when the timing is good): Octopus<br>Broadband: EE, Virgin Media (this is a VOLT plan for Virgin + O2 users)</p><h1 id="Agencies"><a href="#Agencies" class="headerlink" title="Agencies"></a>Agencies</h1><p>Good: Savills ClanGorden 1Let TayLetting Northwood Umega(?)<br>Bad: SouthSide D.J.Alexander SandStone(Baremore)<br>Good but student unfriendly: Zone</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>Be nice to agency staff during viewing - the landlord will ask their opinion</li><li>Add extra rent on the top of agency advice price always works</li><li>OpenRent gives chance to talk to landlord directly, brining  higher chance to be selected</li><li>Use uni email address</li></ul><p>There are also many discussions on Reddit (<a href="https://www.reddit.com/r/Edinburgh/" target="_blank" rel="noopener">https://www.reddit.com/r/Edinburgh/</a>)</p><p>— 以下由 DeepL 翻译 —</p><h1 id="寻找房产的应用程序"><a href="#寻找房产的应用程序" class="headerlink" title="寻找房产的应用程序"></a>寻找房产的应用程序</h1><p>Zoopla, Rightmove, OpenRent, Citylets</p><h1 id="账单"><a href="#账单" class="headerlink" title="账单"></a>账单</h1><p>市政税：对学生免费，需要在网站上注册<br>水费：免费（包括在市政税中）<br>电费和煤气费：先保留以前使用的公司，然后在时机成熟时再换到好评比较多的公司比如 Octopus<br>宽带：EE, Virgin Media (这是Virgin + O2用户的VOLT计划)</p><h1 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h1><p>好：Savills ClanGorden 1Let TayLetting Northwood Umega(?)<br>不好：SouthSide D.J.Alexander SandStone(Baremore)<br>不错，但对学生不友好：Zone</p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><ul><li>看房时对中介公司的工作人员态度要好，房东会询问他们的意见。</li><li>在中介公司建议的价格上再加上额外的租金，这样做总是有效果的。</li><li>OpenRent提供了与房东直接对话的机会，使其有更大的机会被选中。</li><li>使用大学的电子邮件地址</li></ul><p>Reddit（<a href="https://www.reddit.com/r/Edinburgh/）上也有很多讨论。" target="_blank" rel="noopener">https://www.reddit.com/r/Edinburgh/）上也有很多讨论。</a></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爱丁堡大学 MSc CS 硕士就读体验</title>
      <link href="/2022/05/31/edinburgh_msc_cs/"/>
      <url>/2022/05/31/edinburgh_msc_cs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在经历了高考抉择和疫情动荡之后，我在 Omicron 爆发的前夜飞回了英国，开始了一年水硕的学习。</p><a id="more"></a><h1 id="抉择"><a href="#抉择" class="headerlink" title="抉择"></a>抉择</h1><p>在 2021 年的上半年，我陆陆续续收到了 UCL Software Systems Engineering, Manchester Adavanced Computer Science 和 UoE Computer Science 的 offer，同时也与 Imperial Advanced Computing 失之交臂。</p><p>曼彻斯特虽然曾经有阿兰图灵坐镇，时过境迁，它的计算机系已经荣光不再。很显然，我不会去曼彻斯特，然后就是 UCL 和 UOE 之间二选一了。</p><p><strong>UCL</strong><br>Pro: 大城市，G5，世界排名高<br>Con：项目一般（我并不想做软件工程），选课不自由，还要考语言（虽然不难）</p><p><strong>UoE</strong><br>Pro: 选课自由，CS Ranking 英国第一，有关系不错的学长在那边，风景治安好<br>Con：世界排名不如 UCL，村</p><p>在思考再三之后，我选择了爱丁堡，谁会想去花一年时间读不太喜欢的东西换一个仅仅差了没几名的世界排名呢？不过，当时的我并没有想到爱丁堡可以给我远不止我想的。收到爱丁堡 offer 几个月后，我顺利拿到了本科文凭，在一些小波折（本科学校不给 1+3 的成绩单，签证延期）之后，我坐上了前往英国的飞机。</p><h1 id="开学初体验"><a href="#开学初体验" class="headerlink" title="开学初体验"></a>开学初体验</h1><p>在和女朋友隔离了半个月之后，我就要开学了，她也要回到她自己的城市。爱丁堡第一学期还是线上授大课，所以入学手续也很简单。</p><p>一切都很新鲜！作为爱丁堡的强势学科，信息学院有两幢大楼，一幢研究用（Informatics Forum)，一幢教学用(Appleton Tower, AT)，我作为一个授课学生只能使用 AT。我不太喜欢 work from home，因为效率会很低，所以尽管新冠肆虐我也会经常去 AT。AT 本身不错，尤其是风景，大概是我这辈子见过最好的之一。但是里面的硬件设施真的很一般（Intel i5 6th Gen, HDD)，不过因为装的都是 Ubuntu，到也不卡就是了。</p><h1 id="选课-教学向的-100-学分（不包括-IRR，IPP）"><a href="#选课-教学向的-100-学分（不包括-IRR，IPP）" class="headerlink" title="选课 / 教学向的 100 学分（不包括 IRR，IPP）"></a>选课 / 教学向的 100 学分（不包括 IRR，IPP）</h1><p>这边选课需要自己先在 Path 系统选好，然后发送给 Personal Tutor。然后 Persoal Tutor 会联系你开个会，聊一聊然后正式把你的选课注册进系统。如果他觉得有些 advanced level 的课程你没有相应的基础的话，他也许会帮你避一下坑。不过，在其他事物上，爱丁堡的 PT 和诺丁汉的 PT 一样给不了太多帮助（甚至更没用，很少回邮件），不过我也没有遇到过真正紧急需要 PT 的时刻。</p><h2 id="大方向的确立"><a href="#大方向的确立" class="headerlink" title="大方向的确立"></a>大方向的确立</h2><p>都说爱丁堡没课可以选，但是事实上爱丁堡可能已经是开计算机课最多的英国大学了。如果你是爱丁堡的 CS master，有很多大方向可以选择，详细的可以参见 handbook。这里的主要想法是，研究生阶段修课需要有一个明确的主线，而不是再是凑学分。打个比方，如果你想做并行计算相关的，PPLS (Parallel Programming and Language System) PA (Parallel Architecure) EXC (Extreme Computing) 就是很适合一起选；再打个比方，如果你想做 NLP 的话，你可以选 TTDS (Text …) MLP (Machine Learning Pratical) ANLP (Acce.. Natural Language Processing) 这个组合。当然，这个只是对于 MSc CS 的学生，别的 MSc Cybersecurity 和 MSc AI 之类的都已经有自己的主线。</p><h2 id="一些碎碎念"><a href="#一些碎碎念" class="headerlink" title="一些碎碎念"></a>一些碎碎念</h2><p>很多人说爱丁堡没啥课好选，其实这边的选课范围已经非常的宽泛和自由。即使你是 MSc CS，你也可以选上 ANLP + MLP + TTDS。虽然和前几年随便乱选没法比，但是在英国已经算不错的了。</p><h2 id="课程分享-安全"><a href="#课程分享-安全" class="headerlink" title="课程分享 - 安全"></a>课程分享 - 安全</h2><h3 id="Blockchain-amp-Distributed-Ledgers-BDL"><a href="#Blockchain-amp-Distributed-Ledgers-BDL" class="headerlink" title="Blockchain &amp; Distributed Ledgers (BDL)"></a>Blockchain &amp; Distributed Ledgers (BDL)</h3><p>这门课介绍了目前区块链世界的各个方面，包括 bitcoin， etherum，共识算法，区块链经济学，等等。通过这门课，你可以对区块链这个东西有个比较基础的了解。这门课的主要问题是很多人根本听不懂，讲的有点太难，但是作业却很简单（但恶心）。这门课的作业内容基本上只需要前四周的内容，而且是没有考试的。总共有四个作业而且每个我都写了将近 10 页的报告，所以写到后面直接写吐了。好处是都是作业的话，对我来说就更好刷分一些。而且后面三个作业非常的雷同，都是和智能合约编写有关系，我本来期待后面两个作业可以弄点新的东西。不过，我看到很多我的 Master 同学毕设都在做 web3 相关的研究，如果你也想后续在这个方面有所建树，这门课还是很不错的！（区块链革命！！！！！！！）</p><p>评分：4/5</p><h3 id="Security-Enginnering-SENG"><a href="#Security-Enginnering-SENG" class="headerlink" title="Security Enginnering (SENG)"></a>Security Enginnering (SENG)</h3><p>选这门课的主要原因是我毕设和安全有关系，且我这辈子还没上过院士 + 教科书原作者开的课。这门课我这年有两个老师，一位是英国两院院士，我本科计算机安全课教科书《Security Engineering》的作者，从剑桥双聘过来的 Ross Anderson，另外一位是体系结构x安全届的学术新星 Sam Ainsworth，也是从剑桥过来的。这门课介绍了安全工程/安全研究的方方面面，Ross 负责广度（计算机安全和人社会）的部分，Sam 负责深度（计算机安全和计算机软件计算机硬件）的部分。</p><p>这门课上课部分分为 Lecture 和 Tutorial，Lecture 是<a href="https://www.youtube.com/channel/UCRw25HVj1Rvl2XcEHdj4PKg" target="_blank" rel="noopener">放在 Youtube 上的</a>，Tutorial 是线下的。整体来说我觉得课程内容还是很不错的，引人入胜。老师也准备了相关的题目放在 Tut 上一起讨论，比较遗憾的是大家的参与度都不是很高的感觉。</p><p>这门课有两个作业，都是 Paper Review，对当时的我来说是一个小挑战，但是最后得到的分数还不错。我觉得如果你之后想做科研的话，请务必好好做这两个作业。</p><p>总结来看，我对这门课最大的感受就是它把以前学过的基本上所有的计算机相关的东西（网络，操作系统，体系结构，软件工程，计算机伦理）都和安全和安全实践结合了起来，会让你对这些东西以及安全工程的认知提升到一个新的高度。举个例子，一般普通的计算机网络课不会讲目前的 Zero Trust 网络，但是这门课会教。不过从另外一个角度来看，如果你对这些内容一无所知的话，慎选。换句话说，这是一门标准的研究生课程，有一些显性的前置要求（本科的计算机安全）和一些隐形的前置要求（操作系统，计网，体系结构），同样的事情在下面的 Extreme Computing 和 Advanced Database Systems 两门课也有发生。</p><p>评分：4.5/5</p><h2 id="课程分享-体系结构"><a href="#课程分享-体系结构" class="headerlink" title="课程分享 - 体系结构"></a>课程分享 - 体系结构</h2><h3 id="Computer-Architecure-amp-Design-CARD"><a href="#Computer-Architecure-amp-Design-CARD" class="headerlink" title="Computer Architecure &amp; Design (CARD)"></a>Computer Architecure &amp; Design (CARD)</h3><p>这门课由两个方面的内容组成，一方面是 Design (设计)，一方面是 Architecure（体系结构）。有人可能会疑惑，为什么我到研究生阶段才上这门课，其实答案很简单，因为我本科的学校根本！没有！做这方面的老师。我本科英国大一上过一门叫做 System &amp; Arch 的课，但是讲的非常的杂乱，只是介绍了下时钟、频率和指令集，教了下 MIPS 的汇编和计算机网络的入门，而不是真正的体系结构课。扯远了，通过 CARD 这门课的学习，你可以学到单核 CPU 的设计，从逻辑门到指令集，从基础的五级流水到分支预测、数据转发、乱序执行。可以说，学会了这门课你就基本上掌握了直到本世纪初的 CPU （在 CMP 还没兴起之前）的设计。</p><p>从课程时间设置上来看，由 Lecture，Tutorial 和 Lab 组成。Lecture 是由 Prof Nigel Topham 一个人完成，讲了 Verilog 编程、手推逻辑门、流水线、寄存器、状态机、时序设计、分支预测、乱序执行、高速加法乘法器和内存结构。内容有点多，每节课都需要一些额外的时间去消化和理解，但是绝对是引人入胜。Prof Nigel Topham 是土生土长的英国人，口音非常的舒服，听他上课是一种享受。Tutorial 上会讲一些习题，很多习题都是从往年的试卷上出的，所以好好上 Tutorial 会对考试有很大的帮助。Lab 只在上半个学期（Coursework 1 的 ddl 之前）有，大家可以在 Lab 上问关于 Coursework 的问题。</p><p>这门课的考评由两个 Coursework 和一个 Exam 组成。Exam 只要刷 Past Paper 就能得到不错的分数（我貌似是 92？）。Coursework 1 会给每个学生发一块 Xilinx FPGA 板子，然后让学生用 Verilog 写一些东西。因为我当时实习的时候旁边的工友都是做 FPGA 的，我早就想玩玩了，当时拿到板子特别激动。CW1 分四个部分，第一部分太简单就不说了，第二部分是写一个 ALU （纯组合电路），第三部分是写一个 RegFile （简单的时序电路），第四部分是把自己的写的 ALU 和 RegFile 放进一个老师给的 RISC-V 五级流水 CPU，然后实现数据冒险，最后开动自己的智慧再去进行一些优化。CW1 要写一个 report，同时也要把写好的 CPU 烧进板子在 Lab 给老师看然后评分。当你自己优化好的 CPU 插上 HDMI 之后在屏幕上点亮的时候，那种成就感是无以复加的。CW 2 是用 C++ 在 Intel Pin 上写三个分支预测器，不难，我就不多说了。</p><p>如果你看了我的文章决定选这门课，我还是要预警一下，CW 1 可能需要你花 50 个小时左右的时间去做，如果你没有下定决心学这个，请不要给自己添麻烦。</p><p>论对这门课的喜爱程度，我觉得可以排到我自从本科以来所有上过的课中的前三，当然也是因为它填补了我心中一直的空白。</p><p>评分：5/5</p><h3 id="Parallel-Architecure-PA"><a href="#Parallel-Architecure-PA" class="headerlink" title="Parallel Architecure (PA)"></a>Parallel Architecure (PA)</h3><p>这门课可以说是 CARD 课的延续，不过很遗憾，下一年貌似不开，不过我还是想写一些。接 CARD，我学习了单核 CPU 的设计，而 PA 就是介绍了自从本世纪多核 CPU 兴起之后的故事。这门课首先介绍了这 20 年来体系结构领域发生的变化，以及 Domain-Specific 的大趋势。然后就详细讲解了目前最流行的单 Chip 多核 CPU 中比较重要的主题：Cache Coherence，Memory Consistency &amp; Synchronization。这几个主题很难理解，老师（Prof Vijay Nagarajan）花了好几周的时间去讲这些。在讲完这些主题之后，老师介绍了 GPU 和异构计算，以及异构计算的 Memory Consistency。这门课和 Security Engineering 一样，教科书也是教授自己写的（再次感叹爱丁堡师资力量的强大）。</p><p>这门课我觉得缺少了 Tutorial，这门课的 Lecture 比 CARD 还要更加难懂许多，如果有 Tutorial 答疑会好很多。</p><p>关于作业，两个作业都不简单。第一个作业是 Paper Review，ddl 有点早，改分有点低，不过只占 15% 就无所谓。第二个作业是让学生自己用代码去研究 Cache Coherence 和 Memory Consistency，要用到 C 语言和 pthread （老师不会教，硕士生默认会），同时也要写一篇类似于科研报告一样的东西，我写了 15 页，最后给分挺慷慨（我拿了 87）。我个人的想法是整体工作量对于一门 10 学分的课有点多了。</p><p>这门课我花的时间和 CARD 一样是偏多的，但是学会了真的应该会对以后的生涯，无论是 SDE 还是 system research，都会有帮助。Prof Vijay 人也很好，上课随时可以答疑。</p><p>评分：4.5/5</p><h2 id="课程分享-其他计算机系统"><a href="#课程分享-其他计算机系统" class="headerlink" title="课程分享 - 其他计算机系统"></a>课程分享 - 其他计算机系统</h2><h3 id="Extreme-Computing-EXC"><a href="#Extreme-Computing-EXC" class="headerlink" title="Extreme Computing (EXC)"></a>Extreme Computing (EXC)</h3><p>这门课的内容稍微有点散，不过可能形散而神不散。这门课由两位年轻的教授，Dr Amir Shaikhha 和 Dr Mai Luo （<a href="https://www.zhihu.com/people/mailuo" target="_blank" rel="noopener">他的知乎</a>） 共同授课。Amir 会介绍 MapReduce，Spark （以及 MLlib）和 Pregel，同时着重于 Spark 的实操，教授了 Scala 语言并布置了两个相关的 Coursework。我之前学过 Haskell 所以 Scala 对我来说其实没啥，但是身边很多朋友就因此被劝退了。同时，Amir 的导师是 Scala 的发明者（之一？），能从一门语言的发明者的学生那边学习到一门语言也是一种很奇妙的经历。</p><p>然后我们就会发现 MapReduce 的范式有它自己的局限性，Spark MLlib 只能做一些传统的机器学习任务。这时候我唯一在爱丁堡接触到的中国老师，做 MLSys 的麦洛老师会介绍一些关于分布式/并行深度学习的知识。麦洛老师介绍了一些分布式机器学习的范式和框架，都是业界目前炙手可热的 Topic。Mai Luo 介绍的 MLSys 论文和李沐最近新发出来视频中挑选的论文高度一致（GPipe，Parameter Server)。</p><p>最后 Mai Luo 和 Dmitrii Ustiugov 还有一些客座教授（Guest Lecture）介绍了一些云计算相关的内容，比如分布式数据存储（GFS，对象存储）和各类的虚拟化技术（Docker，K8S，Amazon Firecracker 和函数计算）。Dmitrii Ustiugov 目前在 ETHz 做博后，听说已经拿到了港科广的教职，各位对函数计算感兴趣的可以去陶瓷他做第一个 PhD 哈哈哈。</p><p>这门课我这年的 CW 不难，考试也不难，好好准备好好学就可以拿到很好的分数，但是可能明年（22/23学年）会难一些？I don’t know to be hoenst.</p><p>这门课最大的特点是和目前以云为主的 SDE 工作高度契合，如果你毕业之后是想找 SDE 的工作，这门课会给面试中 System Design 环节带来很大的帮助。</p><p>评分：5/5</p><h3 id="Advanced-Database-Systems"><a href="#Advanced-Database-Systems" class="headerlink" title="Advanced Database Systems"></a>Advanced Database Systems</h3><p>首先，这门课不教 SQL。这门课讲的是如何去构造一个现代数据库，也是从单线程出发，然后最后讲数据库事务（并行）和分布式数据存储（2PC）。我觉得这门课的内容在 DRPS 页面已经介绍的很好的了，我就提几个点吧。</p><ul><li>这门课和 SENG 一样，有一些隐藏的前置知识要求。老师会默认你会有一些操作系统、系统设计、体系结构的知识，不过其实完全不会也可以学会，只是如果你是本科 EE/Math/etc. 转专业过来的且选的都是的 AI 课，可能上的会有些吃力</li><li>这门课的 Lecture 量很大</li><li>这门课的 CW 有点难，但是不是完全做不出来那种，我写了 2000 行左右吧。然后 CW 评分 90% 的部分是纯纯机改，剩下 10% 是代码可维护性。我没有学过 Java 的朋友也做完了，拿了 90+。</li><li>这门课的考试要复习的有点多，不过给分不低</li><li>两个老师人都很好</li></ul><p>评分 4.5/5</p><h1 id="IRR-IPP-毕设-科研向的-80-学分（包括-IRR，IPP）"><a href="#IRR-IPP-毕设-科研向的-80-学分（包括-IRR，IPP）" class="headerlink" title="IRR-IPP-毕设 / 科研向的 80 学分（包括 IRR，IPP）"></a>IRR-IPP-毕设 / 科研向的 80 学分（包括 IRR，IPP）</h1><p>讲完了可以自由选择的学分之后，我想来谈谈爱丁堡 MSc CS 对以后想在科研道路有一定建树的同学准备的 80 科研学分。</p><p>这 80 学分包括了以下三个板块：</p><ul><li><p>Informatics Research Review (10 Credits)</p><p>  IRR 是一门教你写综述的课，我不觉得这门课安排的很好，不过无论如何给了你 10 学分的时间去学会写一篇 Literature Review。相比我女朋友的学校，把写 Review 直接放进 Dissertation，爱丁堡真的已经是在手把手带你做科研。<br>  这个 Literature Review 的主题是自选的，上限是 8 页，不过我建议最好写一点本校有老师在做的方向，这样可以和后期的 IPP 契合。</p></li><li><p>Informatics Project Proposal (10 Credits)</p><p>  IPP 是 IRR 的后续和 Dissertation 的前奏。IPP 就是给自己的毕设写一份 Proposal，自己的导师会打分。我真的建议 IPP 要好好写，不然连毕设都没开始你的毕设导师已经放弃你了==</p></li><li><p>Dissertation (60 Credits)</p><p>  这个我目前还在体验，不过因为我导师 + 我 self-propose 的原因，我在去年 12 月和今年 4 月放弃了休息，提前做了一些工作。因为每个人和导师合作的行为模式都有区别，所以我就简单讲一下 self-propose。self-propose 指的是自己提一个毕设题目，而不是等到第二学期从导师给的论文题目里面挑。self-propose 做的课题一般会更前沿，更有可能发表一些。不客气的说，有些毕设课题从题目开始没有发表论文的可能性了。<br>  self-propose 很麻烦，要自己选老师自己陶瓷，如果你以后不想做科研我真的不推荐，但是如果你想，这个真的会很有帮助。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Univeristy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A review on papers of RowHammer, Specture and HeartBleed</title>
      <link href="/2022/05/01/sidechannel/"/>
      <url>/2022/05/01/sidechannel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Litrature review on RowHammer, Specture and HeartBleed</p><a id="more"></a><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><h2 id="Flipping-Bits-in-Memory-Without-Accessing-Them-An-Experimental-Study-of-DRAM-Disturbance-Error"><a href="#Flipping-Bits-in-Memory-Without-Accessing-Them-An-Experimental-Study-of-DRAM-Disturbance-Error" class="headerlink" title="Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Error"></a>Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Error</h2><p>As the DRAM processing technology continuously evolves, the DRAM cells are considered to be more likely to be interference by other cells. Kim et al. [1] discovered a vulnerability in modern DRAM chips, named Rowhammer attack afterwards. A Rowhammer attack can flipbits in a row on a DRAM chip by frequent accessing another physical adjacent row.</p><p>The authors firstly demonstrated this vulnerability can be easily exploited with a few lines of assembly on a commodity PC. Then in-depth analysis with an FPGA-based testing platform is performed to study behaviour and root cause. It is concluded that most DRAM modules manufactured in 2012 and 2013 are affected and the number of accesses required is relatively small. Finally, a novel mitigation solution is proposed.</p><h2 id="The-Matter-of-Heartbleed"><a href="#The-Matter-of-Heartbleed" class="headerlink" title="The Matter of Heartbleed"></a>The Matter of Heartbleed</h2><p>The Heartbleed vulnerability is a software bug in a widely used and fundamental cryptography library OpenSSL and consequently, is considered to be a serious security issue once disclosed. Based on such a phenomenal vulnerability, the actual impact of the vulnerability and responses from various sides including bug patching, certificaterevoking and attacks before and after disclosure are measured and evaluated in this paper [2]. The investigation shows the impact of this vulnerability is indeed great with massive attacks. Many sites are patched, but most of them are patched incorrectly (no certificate replacement). Additionally, the authors notifiedthe administrators of unpatched services to study the effectiveness of post-disclosure community mitigation measures and it is confirmedto be useful.</p><p>Building upon the previous investigation and experiment, five aspects are discussed with weak- nesses and strengths observed and concrete suggestions.</p><h2 id="Spectre-Attacks-Exploiting-Speculative-Execution"><a href="#Spectre-Attacks-Exploiting-Speculative-Execution" class="headerlink" title="Spectre Attacks: Exploiting Speculative Execution"></a>Spectre Attacks: Exploiting Speculative Execution</h2><p>The Spectre is a well-known side-channel attack proposed by Kocher et al. [3] This attack exploits micro-architectural features including speculative execution, branch prediction and caches which are common in modern computer processors.</p><p>The Spectre attack can be performed in three phases. The branch prediction unit (BPU) is trained maliciously for exploitable instructions to be speculatively executed. Then, the instructions are modifiedto ones perform unexpected accesses and fail the branch condition. The instructions will be executed speculatively with mis-trained processor as a micro-architectural behaviour and leave cache-based covert channels. Then the attacker can retrieve secret data from the channel. Based on this procedure, two variants are discussed where poisons branch predictor and branch target buffer (BTB) respectively.</p><p>It is demonstrated nearly all processor vendors are affected, and the software security systems relying on hardware security guarantees are consequently becoming vulnerable. And various methods are suggested to prevent the Spectre attack.</p><h1 id="Key-Themes"><a href="#Key-Themes" class="headerlink" title="Key Themes"></a>Key Themes</h1><p>A typical structure is observed in these three papers, which study or even reveal famous failures. The vulnerability and the attack around it are explained as a starting point. Then the range and impact of the attack are well studied. Potential solutions are proposed in the end, but to different extents, depending on the nature of vulnerability. It is worth noting that Kim et al. and Kocher et al. attaches more importance to the explanation as they are the papers that reveal the attack, while Durumeric et al. focus on the impact. Under such structure, the reader can obtain a clear understanding of attack strategy and root cause (what), the impact (why) and the solutions (how).</p><p>What the vulnerability is? I would consider all three attacks as side-channel, following the definition in Ross Anderson’s book - “A side channel is where information leaks accidentally via some medium that was not designed or intended for communication”. It may be more intuitive for the Spectre and the Heartbleed as they enable the read privilege for the attacker. Although attacks like the RowHammer don’t leak data directly, an attacker can change the permissions bits in the memory to enable the read privilege. Therefore, the attacker can get control over the system regardless of the direct privilege provided by the attack. However, the nature of the side-channels implied is diverse. The HeartBleed is a pure software bug, the Spectre is a vulnerability on the central hardware unit (CPU), and the RowHammer exploits a relative peripheral hardware unit (Memory Modules).</p><p>Why we should care about this vulnerability? Although all three attacks are famous, the impact varies on factors like exploitation difficulty and influence range. Since the HeartBleed attack is a web software failure, an attacker can exploit it remotely. By contrast, the other two attacks are more challenging to perform as the attacker must run some program on the machine. Furthermore, it is non-trivial to precisely manipulate the adjacent memory rows around the row with critical data with several levels of memory address translation from operating system, memory management unit, etc., making the Rowhammer the most challenging one to exploit. However, the hardware ones may be more severe in terms of influencerange, as the number of vulnerable websites to the HeartBleed is much less than vulnerable processors and memory modules.</p><p>How to Mitigate or Solve it? It is also found that fixing a software-based side-channel like the HeartBleed is the most straightforward. Although there are software techniques to mitigate the hardware-based side-channels, they are not a long-term solution and blur the hardware’s responsibili- ties. Thus, it is essential to solve fundamentally from the hardware side. Unfortunately, It may take months or even years for vendors to re-design and ship. The fact that consumers have little incentive to pay for the newest patched hardware make the patch cycle even longer. It is agreed by the authors of the Spectre and the Rowhammer that hardware vendors must take care of the trade-off between performance and security. However, when considering the fixitself, the low certificaterevocation rate in the HeartBleed case indicated a gap between a patch and a correct patch. Since the level of software users is unaligned, the correct patch rate is significantlylower than the patch rate. Meanwhile, the correct path rate of hardware vulnerability may be higher.</p><p>With intensive comparison among three side-channel attacks, it is interesting that software-based side-channel vulnerability is easy to exploit but quick to patch. However, a hardware one is non-trivial to exploit but leaves long-term pain. Again, it is not practical to determine which one is more severe without a certain threat model.</p><h1 id="Legacy"><a href="#Legacy" class="headerlink" title="Legacy"></a>Legacy</h1><p>(Attack evolution) A clear evolution trend on the hardware side-channel is noticed from the RowHam- mer (2014) to the Spectre (2019), then today (2022). Enhancing existing side-channel attacks are intuitive. There are attempts on extending existing attacks to more platforms and more applications. For example, the Drammer attack [4] demonstrates the possibility of the Rowhammer attack on mobile platforms, and the ZombieLoad attack [5] shows that even enclaves are vulnerable to transient attacks. Efforts are also made to decrease the exploitation difficultyof side-channels by introducing remote execution and automated attack features into the attack. The Rowhammer.js [6] and the NetSpectre [7] are presented as the remote variant of the Rowhammer and the Spectre. The Rowhammer.js attack and the cache templates attacks [8] on cache side-channels can both be performed automatically. Apart from the variants, attacks on different side-channels are continuously disclosed by research community from memory attack like (the RowHammer [1]), to cache attack like Flush-and-Flush [9], then finally, out-of-out execution units for the Meltdown [10] and branch prediction units for Spectre [3] The side-channel is becoming easier to exploit but harder to be solved once-for-all [11]</p><p>(Patch issues) The security community was recently shocked by the disclosure of a bug in log4j, a similar software side-channel to the HeartBleed [2] Systematic risk in the modern software world where software heavily relies on libraries is indicated, thus, bringing the importance of fast reaction ability and prevention mechanisms. Li and Paxson [12] provided valuable suggestions after a large- scale study on the vulnerabilities and corresponding patches of 682 open-source software projects, rather than focusing on only one vulnerability like the Heartbleed. In terms of tools, an Internet-wide scanning tool played a vital role in studying the Heartbleed matter. Later on, Durumeric et al. [13] developed a free and democratized version of this tool to help discover vulnerable web services deployments, significantlyreducing the cost of real-time Internet-wide scan. Another growing concern is overlooking future side-channel variants in mitigation methods (i.e. patches). Canella et al. [11] showed the origin defence methods to the Spectre and the Meltdown can be trivially bypassed with naive variants. Therefore, building a fixingplan and trade-off between quick but weak solutions and slow but robust solutions is essential.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors. In 2014 ACM/IEEE 41st International Symposium on Computer Architecture (ISCA), pages 361–372, Minneapolis, MN, USA, June 2014. IEEE.</li><li>Zakir Durumeric, Frank Li, James Kasten, Johanna Amann, Jethro Beekman, Mathias Payer, Nicolas Weaver, David Adrian, Vern Paxson, Michael Bailey, and J. Alex Halderman. The Matter of Heartbleed. In Proceedings of the 2014 Conference on Internet Measurement Conference, pages 475–488, Vancouver BC Canada, November 2014. ACM.</li><li>Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre Attacks: Exploiting Speculative Execution. In 2019 IEEE Symposium on Security and Privacy (SP), pages 1–19, 2019. ISSN: 2375-1207.</li><li>Victor van der Veen, Yanick Fratantonio, Martina Lindorfer, Daniel Gruss, Clementine Maurice, Giovanni Vigna, Herbert Bos, Kaveh Razavi, and Cristiano Giuffrida. Drammer: Deterministic Rowhammer Attacks on Mobile Platforms. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS ’16, pages 1675–1689, New York, NY, USA, 2016. Association for Computing Machinery.</li><li>Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss. ZombieLoad: Cross-Privilege-Boundary Data Sampling. InProceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS ’19, pages 753–768, New York, NY, USA, 2019. Association for Computing Machinery.</li><li>Daniel Gruss, Clémentine Maurice, and Stefan Mangard. Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript. In Juan Caballero, Urko Zurutuza, and Ricardo J. Rodríguez, editors,Detection of Intrusions and Malware, and Vulnerability Assessment, Lecture Notes in Computer Science, pages 300–321, Cham, 2016. Springer International Publishing.</li><li>Michael Schwarz, Martin Schwarzl, Moritz Lipp, Jon Masters, and Daniel Gruss. NetSpectre: Read Arbitrary Memory over Network. In Kazue Sako, Steve Schneider, and Peter Y. A. Ryan, editors, Computer Security – ESORICS 2019, Lecture Notes in Computer Science, pages 279–299, Cham, 2019. Springer International Publishing.</li><li>Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache Template Attacks: Automating Attacks on Inclusive {Last-Level} Caches. pages 897–912, 2015.</li><li>Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. Flush+Flush: A Fast and Stealthy Cache Attack. In Juan Caballero, Urko Zurutuza, and Ricardo J. Rodríguez, editors, Detection of Intrusions and Malware, and Vulnerability Assessment, Lecture Notes in Computer Science, pages 279–299, Cham, 2016. Springer International Publishing.</li><li>Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, et al. Meltdown: Reading kernel memory from user space. In 27th USENIX Security Symposium (USENIX Security 18), pages 973–990, 2018.</li><li>Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. A Systematic Evaluation of Transient Execution Attacks and Defenses. pages 249–266, 2019.</li><li>Frank Li and Vern Paxson. A Large-Scale Empirical Study of Security Patches. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS ’17, pages 2201–2215, New York, NY, USA, 2017. Association for Computing Machinery.</li><li>Zakir Durumeric, David Adrian, Ariana Mirian, Michael Bailey, and J. Alex Halderman. A Search Engine Backed by Internet-Wide Scanning. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, CCS ’15, pages 542–553, New York, NY, USA, 2015. Association for Computing Machinery.</li></ol>]]></content>
      
      
      <categories>
          
          <category> PaperReview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Security </tag>
            
            <tag> Research </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UoN 学生跑毒（COVID-19）指北</title>
      <link href="/2020/03/18/covid-19_back_to_china/"/>
      <url>/2020/03/18/covid-19_back_to_china/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>因新冠肺炎回国信息共享，持续更新。</p><a id="more"></a><h1 id="机票"><a href="#机票" class="headerlink" title="机票"></a>机票</h1><h2 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h2><p>尽量购买行李直挂，转机少的航班。然后现在很多航班都在取消，有小道消息说星期一三五的常规航班是不会取消的。</p><h2 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h2><p><strong>详情请询问自己的航司！！！</strong></p><p><a href="https://www.zhihu.com/question/378703024/answer/1079851308" target="_blank" rel="noopener">我是一名英国留学研究生，鉴于英国现在的疫情情况我该不该回国？ - Ruoning的回答 - 知乎</a></p><p><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200316161326.png" alt=""></p><h2 id="到国内"><a href="#到国内" class="headerlink" title="到国内"></a>到国内</h2><ul><li>记得在当地政府那边提前备案</li><li>准备好支付宝健康码</li><li>让家人找出医保卡<ul><li>宁诺学生好像是一开始就交了四年的</li></ul></li></ul><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><h2 id="住房"><a href="#住房" class="headerlink" title="住房"></a>住房</h2><p>我把东西放在朋友那边了，大家也做好下学年回来的准备吧。</p><h2 id="居留（签证）"><a href="#居留（签证）" class="headerlink" title="居留（签证）"></a>居留（签证）</h2><h3 id="政府"><a href="#政府" class="headerlink" title="政府"></a>政府</h3><p>可以看看这个（<a href="https://www.gov.uk/guidance/coronavirus-immigration-guidance-if-youre-unable-to-return-to-china-from-the-uk" target="_blank" rel="noopener">Coronavirus (COVID-19): immigration guidance</a>）网页？</p><h3 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h3><p>今天去了趟 Cherry Tree Lodge，那边的答复是他们也不知道怎么办，但是因为 COVID-19 的话应该会豁免吧。</p><p>然后我问：“那学校那边我想报备一下应该找谁呢？”，他们回复我让我发邮件给 <a href="mailto:immigration-support@nottingham.ac.uk">immigration-support@nottingham.ac.uk</a> 。内容应该包括：</p><ul><li>你的学号</li><li>你的名字</li><li>你的专业</li><li>你的目的地国家</li><li>你的预计出发/返回</li></ul><p>然后再附上一个别人问到的：<br><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200316163914.jpg" alt=""></p><h1 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h1><h2 id="Personal-Tutor"><a href="#Personal-Tutor" class="headerlink" title="Personal Tutor"></a>Personal Tutor</h2><p>记得和你的 PT 说一声你要回国比较好哦！</p><h2 id="Coursework-Extenuating-circumstances"><a href="#Coursework-Extenuating-circumstances" class="headerlink" title="Coursework - Extenuating circumstances"></a>Coursework - Extenuating circumstances</h2><p>因为回国的话很有可能一入境就被隔离，隔离的环境也是未知的。作为严重依赖<del>StackOverflow</del>互联网的计算机科学学生，如果隔离的地方没有网络的话，对于做作业是致命的打击。</p><p>所以我去咨询了 Student Service Center 关于申请 EC 的事宜。那边的专员表示可以申请 EC，然后有两种申请情况：</p><ul><li>被隔离了，隔离完去申请，附上相关证明</li><li>还没有被隔离，现在先申请，之后补证明</li></ul><p>关于申请方法就是填表，链接是这个：<br><a href="https://www.nottingham.ac.uk/studentservices/contact-us/extcirc-form.aspx" target="_blank" rel="noopener">Extenuating circumstances form</a>，其他信息在<a href="https://www.nottingham.ac.uk/academicservices/currentstudents/extenuating-circumstances/extenuating-circumstances-procedure.aspx" target="_blank" rel="noopener">这里</a>可以找到。</p><p>关于 EC 申请的进度，专员让我给 <a href="mailto:ss-assessments-jc@nottingham.ac.uk">ss-assessments-jc@nottingham.ac.uk</a> 发邮件。</p><h2 id="Final-Exam"><a href="#Final-Exam" class="headerlink" title="Final Exam"></a>Final Exam</h2><h3 id="UoN-安排"><a href="#UoN-安排" class="headerlink" title="UoN 安排"></a>UoN 安排</h3><h4 id="Student-Service-Center"><a href="#Student-Service-Center" class="headerlink" title="Student Service Center"></a>Student Service Center</h4><p>表示不确定，说是可能会变成线上考试。</p><h4 id="Group-Project-Supervisor"><a href="#Group-Project-Supervisor" class="headerlink" title="Group Project Supervisor"></a>Group Project Supervisor</h4><p>他就说可能九月之前都不会有线下活动了。。。。</p><h3 id="海外考试"><a href="#海外考试" class="headerlink" title="海外考试"></a>海外考试</h3><p>官方网页：<a href="https://www.nottingham.ac.uk/academicservices/currentstudents/examinations/overseas-examinations/apply-overseas-exam.aspx" target="_blank" rel="noopener">How to apply for overseas examinations</a></p><h4 id="UNUK-这边的申请-截止2019-03-16仍可申请"><a href="#UNUK-这边的申请-截止2019-03-16仍可申请" class="headerlink" title="UNUK 这边的申请 - 截止2019.03.16仍可申请"></a>UNUK 这边的申请 - 截止2019.03.16仍可申请</h4><ol><li>查能不能海外考 - <a href="https://www.nottingham.ac.uk/academicservices/documents/can-your-exams-be-taken-overseas-18-19.xls" target="_blank" rel="noopener">Check if your UNUK exams MSExcelconcan or cannot be taken overseas</a></li><li>填申请表 - <a href="https://www.nottingham.ac.uk/academicservices/currentstudents/examinations/overseas-examinations/overseas-exam-form.aspx" target="_blank" rel="noopener">Overseas Exam Form</a></li></ol><h4 id="UNNC-默认你是想要在宁诺考"><a href="#UNNC-默认你是想要在宁诺考" class="headerlink" title="UNNC - 默认你是想要在宁诺考"></a>UNNC - 默认你是想要在宁诺考</h4><p>我目前就是给 UNNC 的 <a href="mailto:exams@nottingham.edu.cn">exams@nottingham.edu.cn</a> 发了邮件，内容如图，英语渣请谅解。</p><p><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200316163018.png" alt=""></p><p>我这边建议你多说一句已经在 UNUK 申请了，顺便把 UNUK 的申请表回执邮件附上。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> COVID-19 </tag>
            
            <tag> Univeristy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 VPS 把 HE IPv6 地址 WireGuard 分配给 Windows 客户端使用</title>
      <link href="/2020/03/14/hev6_wireguard/"/>
      <url>/2020/03/14/hev6_wireguard/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>把 HE 给你的 IPv6 通过 VPS 带回家吧！</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近呢，发现自己其实对网络一窍不通。之前玩了很久的应用层和传输层，但是对网络层和接口着实是捉襟见肘。前两天看到了 Dr.Cai 发的<a href="https://www.91yunbbs.com/discussion/641/drcais-noob-bgplayer-in-1hour-绝赞速成班-逃#latest" target="_blank" rel="noopener">BGP速成</a>，打算也来搞个玩玩。</p><p>但是我的想法是，并没有要一下去就去上 BGP 玩，正好 HE 的 6in4 隧道会分配一个 /64 甚至是 /48 的 v6 段，那不如先拿这个来玩玩。搞定了这个再去搞那些和 BGP 有关系的广播等高级操作。</p><p>不过要说一句的是，本人目前在墙外，国内我不知道是否可以这样搞！</p><h1 id="注册-tunnelbroker"><a href="#注册-tunnelbroker" class="headerlink" title="注册 tunnelbroker"></a>注册 tunnelbroker</h1><p>这个有很多博文讲过如何操作了，就不赘述了,可以参考<a href="https://www.91yunbbs.com/discussion/549/让affman失业系列菜鸟教学-第一篇-用6in4-隧道来替代-socks5代理" target="_blank" rel="noopener">这篇</a>。</p><h1 id="VPS-CentOS-7-配置-IPv6-隧道"><a href="#VPS-CentOS-7-配置-IPv6-隧道" class="headerlink" title="VPS(CentOS 7) 配置 IPv6 隧道"></a>VPS(CentOS 7) 配置 IPv6 隧道</h1><h2 id="解除-IPv6-限制（可选）"><a href="#解除-IPv6-限制（可选）" class="headerlink" title="解除 IPv6 限制（可选）"></a>解除 IPv6 限制（可选）</h2><p>这里我们要在<code>/etc/sysctl.conf</code>加入这几行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv6.conf.all.disable_ipv6 &#x3D; 0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 &#x3D; 0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 &#x3D; 0</span><br></pre></td></tr></table></figure><h2 id="设置隧道用的-interface"><a href="#设置隧道用的-interface" class="headerlink" title="设置隧道用的 interface"></a>设置隧道用的 interface</h2><p>新建<code>/etc/sysconfig/network-scripts/ifcfg-sit1</code>，编辑如下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE&#x3D;sit1</span><br><span class="line">BOOTPROTO&#x3D;none</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">IPV6INIT&#x3D;yes</span><br><span class="line">IPV6TUNNELIPV4&#x3D;&lt;Remote IPv4&gt;</span><br><span class="line">IPV6TUNNELIPV4LOCAL&#x3D;&lt;Local(VPS) IPv4&gt;</span><br><span class="line">IPV6ADDR&#x3D;&lt;Client IPv6(with mask)&gt;</span><br><span class="line">IPV6_DEFAULTGW&#x3D;&lt;Server IPv6(without mask)&gt;</span><br></pre></td></tr></table></figure><p>这边再提供一个虚拟样例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE&#x3D;sit1</span><br><span class="line">BOOTPROTO&#x3D;none</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">IPV6INIT&#x3D;yes</span><br><span class="line">IPV6TUNNELIPV4&#x3D;216.66.88.98</span><br><span class="line">IPV6TUNNELIPV4LOCAL&#x3D;185.177.111.111</span><br><span class="line">IPV6ADDR&#x3D;2001:470:1111:510::2&#x2F;64</span><br><span class="line">IPV6_DEFAULTGW&#x3D;2001:470:1111:510::1</span><br></pre></td></tr></table></figure></p><p>如果本机没有原生 IPv6 的话，我们就可以在这里<code>ifup sit1</code>，然后 <code>curl http://v6.ipv6-test.com/api/myip.php</code> 看看自己的 v6 是否已经通了。<br>如果有原生 IPv6 的话，看一下后面我的解决。</p><h2 id="原生-v6-的追加配置"><a href="#原生-v6-的追加配置" class="headerlink" title="原生 v6 的追加配置"></a>原生 v6 的追加配置</h2><h3 id="设置默认-v6-出口为-sit1"><a href="#设置默认-v6-出口为-sit1" class="headerlink" title="设置默认 v6 出口为 sit1"></a>设置默认 v6 出口为 sit1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;network</span><br><span class="line"></span><br><span class="line">NETWORKING&#x3D;yes</span><br><span class="line">IPV6_DEFAULTDEV&#x3D;sit1</span><br></pre></td></tr></table></figure><p>这边我遇到了一个小坑，我的 VPS 商用了 cloud-init 导致每次重启会重写这个文件，解决方法是运行如下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch &#x2F;etc&#x2F;cloud&#x2F;cloud-init.disabled</span><br></pre></td></tr></table></figure><h3 id="关闭原生-interface-的-v6-功能"><a href="#关闭原生-interface-的-v6-功能" class="headerlink" title="关闭原生 interface 的 v6 功能"></a>关闭原生 interface 的 v6 功能</h3><p>在 <code>/etc/sysctl.conf</code> 中加入 <code>net.ipv6.conf.&lt;your default interface&gt;.disable_ipv6 = 1</code> 也许是个不错的办法。</p><h1 id="配置WireGuard"><a href="#配置WireGuard" class="headerlink" title="配置WireGuard"></a>配置WireGuard</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><p>这边我们就先直接用一键脚本进行 WireGurad 的安装，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;atrandys&#x2F;wireguard&#x2F;master&#x2F;wireguard_install.sh &amp;&amp; chmod +x wireguard_install.sh &amp;&amp; .&#x2F;wireguard_install.sh</span><br></pre></td></tr></table></figure><p>如果要换内核的话请先换内核在进行安装。</p><p>这个脚本自动配置了客户端和服务端的密码以及配置，讲道理是可以直接用的，但是这并不是我们想要的。我们这边只是要本地分配到 IPv6 然后 v6 地址通过 WireGuard 访问，所以还要进一步配置。</p><p>首先我们启用一波自动 WireGuard 的自动开机啥的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable wg-quick@wg0.service ### 自动开机</span><br><span class="line">systemctl start wg-quick@wg0.service  ### 起一下服务看看能不能跑</span><br><span class="line">systemctl stop wg-quick@wg0.service   ### 停掉，开始配置</span><br></pre></td></tr></table></figure><h3 id="编辑-wg0-conf"><a href="#编辑-wg0-conf" class="headerlink" title="编辑 wg0.conf"></a>编辑 <code>wg0.conf</code></h3><p>编辑 <code>/etc/wireguard/wg0.conf</code> 为如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address &#x3D; 10.0.0.1&#x2F;24</span><br><span class="line">MTU &#x3D; 1420</span><br><span class="line">SaveConfig &#x3D; false</span><br><span class="line">PostUp &#x3D; iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o net0 -j MASQUERADE</span><br><span class="line">PostDown &#x3D; iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o net0 -j MASQUERADE</span><br><span class="line">ListenPort &#x3D; 56056</span><br><span class="line">PrivateKey &#x3D; &lt;&gt;</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey &#x3D; &lt;&gt;</span><br><span class="line">AllowedIPs &#x3D; 10.0.0.2&#x2F;32, 2001:470:1111:510::1&#x2F;128</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200314142004.png" alt=""></p><p>这里的地址前缀中取一个地址出来写到 AllowedIPs 里面，因为我们就用一台电脑登陆，<code>::1/128</code> 就是个不错的选择。至于 PublicKey 和 PrivateKey 就按照原来就好。</p><p>然后我们就可以用 <code>wg-quick up wg0</code> 来暂时开启 WireGuard 服务并配置客户端。</p><h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><p>这边我选择了 TunSafe 作为我的客户端，下载地址：<a href="https://tunsafe.com/download" target="_blank" rel="noopener">https://tunsafe.com/download</a> 。</p><p>安装完成之后，我们点一下主界面的 Edit Config，然后先把服务器端自动生成在 <code>/etc/wireguard/client.conf</code> 中的内容拷贝过来。</p><p>然后，把 <code>Interface</code> 中的 <code>Address</code> 改为 <code>10.0.0.2/32, &lt;Routed /64&gt;::1/128</code> ; <code>Peer</code> 中的 <code>AllowedIPs</code> 改为 <code>10.0.0.2/24, ::0/0</code>, 这样的话我们 v4 除了 WireGuard 内网都走本地， v6 全部走 WireGuard。</p><p>最终配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey &#x3D; &lt;&gt;</span><br><span class="line">Address &#x3D; 10.0.0.2&#x2F;32, 2001:470:1111:510::1&#x2F;128</span><br><span class="line">DNS &#x3D; 8.8.8.8</span><br><span class="line">MTU &#x3D; 1420</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey &#x3D; &lt;&gt;</span><br><span class="line">Endpoint &#x3D; 185.177.111.111:56056</span><br><span class="line">AllowedIPs &#x3D; 10.0.0.2&#x2F;24, ::0&#x2F;0</span><br><span class="line">PersistentKeepalive &#x3D; 25</span><br></pre></td></tr></table></figure><p>然后尝试链接，用浏览器打开 <code>https://ipv6-test.com/</code> 看看有没有得到自己的 v6 段下的地址。</p><h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>在服务端运行如下脚本，进行长期运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wg-quick up wg0 ### 关闭临时服务</span><br><span class="line">systemctl start wg-quick@wg0.service  ### 开启守护服务</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>之后的打算还有不少，就先把 flag 立起来吧。</p><ul><li>给 R6300v2 安装 OpenWrt 并用 WireGuard 分配整个网段的 IPv6 给本地局域网的设备</li><li>找一种比 WireGuard 更好的组网方式（可以透过GFW)</li><li>注册ASN，宣告自己的 IP 地址并用之前的方法把这些 IP 带回家</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://askubuntu.com/questions/539277/how-to-get-rid-of-cloud-init" target="_blank" rel="noopener">how-to-get-rid-of-cloud-init</a></li><li><a href="https://eddyemma.com/blog/2018/08/26/科学上网指南-wireguard/" target="_blank" rel="noopener">科学上网指南(10)——wireguard</a></li><li><a href="https://blog.ni-co.moe/public/571.html" target="_blank" rel="noopener">将宣告的 subnet 通过 wireguard 分配给客户端使用</a></li><li><a href="https://kotori.net/2018/10/21/centos-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84wireguard/" target="_blank" rel="noopener">CentOS 安装最新版的Wireguard</a></li><li><a href="https://www.atrandys.com/2018/886.html" target="_blank" rel="noopener">CentOS7一键脚本安装WireGuard</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Baidupcs-web 在 apache2 上的反向代理配置</title>
      <link href="/2019/08/20/baidupcsgo_web_proxy/"/>
      <url>/2019/08/20/baidupcsgo_web_proxy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>此处省略一万句脏话。</p><a id="more"></a><p>最近被安利了一个webui版本的baidupcs-go，叫做BiaduPCS-Web，据说不错我就也来用用。</p><p>安装很容易，使用了GitHub上的一键脚本：<a href="https://github.com/user1121114685/baidupcsweb" target="_blank" rel="noopener">https://github.com/user1121114685/baidupcsweb</a></p><p>但是服务起来之后用的是5299端口，不太优雅对吧？那我就想着做个反代好了，也就是本文的重点了。</p><p>一开始我是想配一个类似于”<a href="http://server/pan/&quot;" target="_blank" rel="noopener">http://server/pan/&quot;</a>, 这样的子目录的反向代理的，但是这个软件不支持baseURL的配置以及路径都是写死的，那就只能单开一个域名给这个软件了。如果您使用的http服务器是nginx请看这里：<a href="https://github.com/liuzhuoling2011/baidupcs-web/issues/20" target="_blank" rel="noopener">请问如何用nginx进行反向代理</a>，caddy我也不太清楚，反正这篇文章讲的只有apache的。</p><p>这个软件有部分链接用的不是http，而是websocket，这就是问题所在了，查了不少资料，我们需要先开启用几个插件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a2enmod proxy</span><br><span class="line">a2enmod proxy_http</span><br><span class="line">a2enmod rewrite</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure><p>然后添加如下的新站点，只开了443的，80请自己改，内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">    ServerName pan.abc.com ######</span><br><span class="line"></span><br><span class="line">    SSLCertificateFile  &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;pan&#x2F;cert.pem ######</span><br><span class="line">    SSLCertificateKeyFile &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;pan&#x2F;key.pem ######</span><br><span class="line">    SSLCertificateChainFile &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;pan&#x2F;chain.pem ######</span><br><span class="line"></span><br><span class="line">    SSLEngine on</span><br><span class="line"></span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    RewriteEngine On</span><br><span class="line"></span><br><span class="line">    RewriteCond %&#123;HTTP:Upgrade&#125; &#x3D; websocket [NC]</span><br><span class="line">    RewriteCond %&#123;HTTP:CONNECTION&#125; ^Upgrade$ [NC]</span><br><span class="line">    RewriteRule &#x2F;ws(.*)           ws:&#x2F;&#x2F;localhost:5299&#x2F;ws$1 [P,L]</span><br><span class="line">    RequestHeader set X-Forwarded-Proto &quot;https&quot;</span><br><span class="line"></span><br><span class="line">    &lt;Location &#x2F;ws&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">        ProxyPassReverse ws:&#x2F;&#x2F;127.0.0.1:5299&#x2F;ws</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location &#x2F;&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">        ProxyPass http:&#x2F;&#x2F;localhost:5299&#x2F;</span><br><span class="line">        ProxyPassReverse &#x2F;</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>简单讲一下，这边把当http请求需要升级为ws请求时，把反代的头改成了ws，然后就可以成功访问了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Ubuntu18.04 上使用 clash 部署旁路代理网关（透明代理）</title>
      <link href="/2019/08/20/clash_gateway/"/>
      <url>/2019/08/20/clash_gateway/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Apple TV 4K 到货前的准备工作</p><a id="more"></a><p>最近打算购入一台 Fire TV 4K, 又因为众所周知的原因, Fire TV 4k 在没有代理的情况下是根本没法用的，所以就萌生了拿之前买的 nuc 来做一个旁路代理网关的想法。</p><p>在Ubuntu上部署一个透明代理网关主要是三块：安装 clash, 简单配置 clash， 高级配置 clash, 配置 iptables 转发。</p><h1 id="安装-clash"><a href="#安装-clash" class="headerlink" title="安装 clash"></a>安装 clash</h1><p>使用 clash 的最主要原因是它自带 redir 服务，且使用 go 语言开发安装非常方便。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v0.15.0/clash-linux-amd64-v0.15.0.gz #下载二进制文件</span><br><span class="line">gzip -d clash-linux-amd64-v0.15.0.gz #解压</span><br><span class="line">mv clash-linux-amd64-v0.15.0 /usr/local/bin/clash #移动到bin</span><br><span class="line">chmod +x /usr/local/bin/clash #添加执行权限</span><br></pre></td></tr></table></figure><p>然后我们把 clash 设置成 service，下面是我的<code>/etc/systemd/system/clash.service</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;clash service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;root</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;clash</span><br><span class="line">Restart&#x3D;on-failure # or always, on-abort, etc</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>然后我们把clash激活为开机启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable clash</span><br></pre></td></tr></table></figure><h1 id="简单配置-clash"><a href="#简单配置-clash" class="headerlink" title="简单配置 clash"></a>简单配置 clash</h1><p>在这个环节中主要是简单配置 clash 及其 dashboard，让其能作为一个局域网的代理服务器存在。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.config/</span><br><span class="line">mkdir clash</span><br><span class="line">touch config.yaml</span><br><span class="line">wget https://github.com/haishanh/yacd/archive/gh-pages.zip</span><br><span class="line">unzip gh-pages.zip</span><br><span class="line">mv yacd-gh-pages/ dashboard/</span><br></pre></td></tr></table></figure><p>然后我们给<code>config.yaml</code>加上内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">external-ui:</span> <span class="string">dashboard</span></span><br><span class="line"><span class="comment">#此处内容请安装一个gui版本的clash然后在里面配置好代理然后抄过来</span></span><br><span class="line"><span class="attr">Proxy:</span> </span><br><span class="line"><span class="attr">Proxy Group:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">Rule:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">IP-CIDR,127.0.0.0/8,DIRECT</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">IP-CIDR,192.168.0.0/16,DIRECT</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">FINAL,Proxy</span></span><br></pre></td></tr></table></figure><p>然后我们执行<code>service clash start</code>，就有一个可以使用的局域网代理服务器了，甚至可以在浏览器里面访问<code>http://serverip:9090/ui/</code>来调试 clash！如果是公网的话我推荐 secret 处加上内容以保证安全性。</p><h1 id="高级配置-clash"><a href="#高级配置-clash" class="headerlink" title="高级配置 clash"></a>高级配置 clash</h1><p>这里的配置主要是两块：</p><h2 id="clash-dns"><a href="#clash-dns" class="headerlink" title="clash dns"></a>clash dns</h2><p>因为我们要拿 clash 做一个透明网关，那么 dns 服务必然是一个问题，clash 自带的 dns 服务很神奇，我研究了一个上午，如果想了解可以看这两篇文章：<a href="https://github.com/Fndroid/clash_for_windows_pkg/wiki/DNS%E6%B1%A1%E6%9F%93%E5%AF%B9Clash%EF%BC%88for-Windows%EF%BC%89%E7%9A%84%E5%BD%B1%E5%93%8D" target="_blank" rel="noopener">DNS污染对Clash（for Windows）的影响</a>，<a href="https://blog.skk.moe/post/alternate-surge-koolclash-as-gateway/" target="_blank" rel="noopener">代替 Surge 增强模式——使用 KoolClash 作为代理网关</a></p><p>最后我用的就是第一篇文章中所用到的方案，在 clash 的设置文件中加入了以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">redir-host</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tls://dns.rubyfish.cn:853'</span></span><br><span class="line">  <span class="attr">fallback:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tls://1.1.1.1:853'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tcp://1.1.1.1:53'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tcp://208.67.222.222:443'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tls://dns.google'</span></span><br></pre></td></tr></table></figure><p>为什么不用 fake-ip 呢？因为我觉得目前的 redir-host 方案足够我本人使用了。</p><h2 id="国内外分流"><a href="#国内外分流" class="headerlink" title="国内外分流"></a>国内外分流</h2><p>clash 这个软件的一大特色就是他的分流功能，所以我想还是得用起来，不说好用，至少可以堪用。</p><p>然后我就找到了网上已经有现成的规则文件了，可以抄过来用。</p><p>如果需要分流的话就把<a href="https://github.com/Hackl0us/SS-Rule-Snippet/blob/master/LAZY_RULES/clash.yaml" target="_blank" rel="noopener">这个文件</a>中的 rules 部分抄进目前的<code>config.yaml</code>。</p><h1 id="配置iptables转发"><a href="#配置iptables转发" class="headerlink" title="配置iptables转发"></a>配置iptables转发</h1><p>这是我们的最后一步，主要是使用 iptables 配置 nat 的转发到 clash，很大一部分都是参考了 <a href="https://lancellc.gitbook.io/clash/start-clash/clash-udp-tproxy-support" target="_blank" rel="noopener">Clash TProxy Mode</a>，不过这里面的规则有问题，会导致 dns 的回环。</p><p>最后修复后的规则如下，这个规则网关本身是不走代理的，反正我可以用 proxychains-ng 对本机进行代理：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -N clash</span><br><span class="line">iptables -t nat -A clash -d 0.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 10.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 127.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 169.254.0.0&#x2F;16 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 172.16.0.0&#x2F;12 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 192.168.0.0&#x2F;16 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 224.0.0.0&#x2F;4 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 240.0.0.0&#x2F;4 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d &lt;local host ip&gt; -j RETURN</span><br><span class="line">iptables -t nat -A clash -p tcp -j REDIRECT --to-port 7892</span><br><span class="line">iptables -t nat -I PREROUTING -p tcp -d 8.8.8.8 -j REDIRECT --to-port 7892</span><br><span class="line">iptables -t nat -I PREROUTING -p tcp -d 8.8.4.4 -j REDIRECT --to-port 7892</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j clash</span><br><span class="line"></span><br><span class="line">ip rule add fwmark 1 table 100</span><br><span class="line">ip route add local default dev lo table 100</span><br><span class="line">iptables -t mangle -N clash</span><br><span class="line">iptables -t mangle -A clash -d 0.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 10.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 127.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 169.254.0.0&#x2F;16 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 172.16.0.0&#x2F;12 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 192.168.0.0&#x2F;16 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 224.0.0.0&#x2F;4 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 240.0.0.0&#x2F;4 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d &lt;local host ip&gt; -j RETURN</span><br><span class="line">iptables -t mangle -A clash -p udp -j TPROXY --on-port 7892 --tproxy-mark 1</span><br><span class="line">iptables -t mangle -A PREROUTING -p udp -j clash</span><br></pre></td></tr></table></figure><h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><p>当然我们还不希望这些规则重启就没，那么我们就需要安装一些辅助工具来持久化iptables的规则：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install iptables-persistent netfilter-persistent</span><br><span class="line">sudo netfilter-persistent save</span><br><span class="line">sudo netfilter-persistent reload</span><br></pre></td></tr></table></figure><p>具体可以看这里：<a href="https://askubuntu.com/questions/119393/how-to-save-rules-of-the-iptables" target="_blank" rel="noopener">how-to-save-rules-of-the-iptables</a></p><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a><a href="https://github.com/Dreamacro/clash/issues/432" target="_blank" rel="noopener">一个问题</a></h2><p>我遇到了主路由映射端口无效的问题，加了一行 iptables 规则就好了。<br>如果还没好的话，把你需要访问的服务在内网 bind 的端口加到下面的这行里面。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -I PREROUTING -p tcp -m multiport --sports 21,22,80,443,3389,5900,5901,5902,5902 -j RETURN</span><br></pre></td></tr></table></figure><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>那么就可以把旁路网关地址以及dns设置在需要的机器上了！我也要开始下单 Apple TV 了！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AegiSub和FFmpeg为视频打上字幕(啊？Pr是什么？)</title>
      <link href="/2018/10/16/encoded_subtitle/"/>
      <url>/2018/10/16/encoded_subtitle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SESA干培。</p><a id="more"></a><h2 id="工具的准备"><a href="#工具的准备" class="headerlink" title="工具的准备"></a>工具的准备</h2><h3 id="1-Aegisub"><a href="#1-Aegisub" class="headerlink" title="1. Aegisub"></a>1. <strong>Aegisub</strong></h3><p>请访问<a href="http://www.aegisub.org/" target="_blank" rel="noopener">Aegisub官网</a>对应系统进行下载以及安装</p><h3 id="2-FFMpeg"><a href="#2-FFMpeg" class="headerlink" title="2. FFMpeg"></a>2. <strong>FFMpeg</strong></h3><p>Windows用户:</p><ul><li>下载FFMpeg: <a href="https://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">https://ffmpeg.zeranoe.com/builds/</a> (请选择static版本)</li><li>解压FFmpeg: 把下载好的压缩包解压到C:\ffmpeg目录下</li><li>配置环境变量: 按照<a href="https://jingyan.baidu.com/article/b24f6c82cba6dc86bfe5da9f.html" target="_blank" rel="noopener">这篇文章</a>将刚才的目录添加入Path</li><li>测试运行: 按WIN+R,输入CMD,在跳出来的终端窗口中输入<code>ffmpeg -version</code> 如有信息则说明安装成功</li></ul><p>MAC用户:</p><ul><li>下载安装homebrew: 打开Termial,输入<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code> </li><li>下载安装FFMpeg: 继续在Termial中输入 <code>brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265</code></li><li>测试运行: 继续Terminal中输入<code>ffmpeg -version</code> 如有信息则说明安装成功</li></ul><h2 id="打时间轴-得到到字幕文件"><a href="#打时间轴-得到到字幕文件" class="headerlink" title="打时间轴,得到到字幕文件"></a>打时间轴,得到到字幕文件</h2><p>请参考以下视频进行相关学习,以懂得如何为文本配上时间轴并得到.ass字幕文件为目标.样式和特效如果自己有感兴趣的话可以深究一下,这是一个无底洞.<br><a href="https://www.bilibili.com/video/av2345646/" target="_blank" rel="noopener">https://www.bilibili.com/video/av2345646/</a><br><a href="https://www.bilibili.com/video/av32482188/" target="_blank" rel="noopener">https://www.bilibili.com/video/av32482188/</a></p><h2 id="把字幕压进视频轨"><a href="#把字幕压进视频轨" class="headerlink" title="把字幕压进视频轨"></a>把字幕压进视频轨</h2><p>用cd命令将终端位置调到视频文件夹,下面是一个例子.<br><figure class="highlight plain"><figcaption><span>C:\Users\break\Videos```</span></figcaption><table><tr><td class="code"><pre><span class="line">用下面这个命令把字幕烧进视频流,其中文件名按照你的文件名进行改动.</span><br><span class="line">&#96;&#96;&#96;ffmpeg -i mymovie.mp4 -vf ass&#x3D;subtitles.ass mysubtitledmovie.mp4</span><br></pre></td></tr></table></figure><br>如果遇到了什么问题,请打开参考文献[4]看一下其中有没有提到,如果有很奇怪的问题欢迎<a href="mailto://admin@ib32.com">Email我</a>.</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ol><li><a href="https://www.cnblogs.com/xiezhidong/p/6924775.html" target="_blank" rel="noopener">FFmpeg安装（windows环境）</a></li><li><a href="https://www.jianshu.com/p/0b1c98a28fd4" target="_blank" rel="noopener">在mac os下使用FFmpeg</a></li><li><a href="https://stackoverflow.com/questions/8672809/use-ffmpeg-to-add-text-subtitles" target="_blank" rel="noopener">Use ffmpeg to add text subtitles - StackOverflow</a></li><li><a href="http://www.yaosansi.com/post/ffmpeg-burn-subtitles-into-video/" target="_blank" rel="noopener">使用FFmpeg将字幕文件集成到视频文件</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Media </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
            <tag> VideoTech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车牌识别</title>
      <link href="/2018/10/14/lisense_plate_recognition/"/>
      <url>/2018/10/14/lisense_plate_recognition/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一筹莫展。</p><a id="more"></a><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>我一开始是想自己去训练这个车牌识别的的 这是Part1的主要内容</p><h3 id="生成车牌"><a href="#生成车牌" class="headerlink" title="生成车牌"></a>生成车牌</h3><p>为什么要生成车牌，因为车牌和人脸不一样，车牌的数据比较隐私，国内并没有说有任何公开的 可以拿来训练车牌的数据集，也没有时间慢慢去收集、标注，只能自己来生成。<br><a href="https://github.com/szad670401/end-to-end-for-chinese-plate-recognition" target="_blank" rel="noopener">end-to-end-for-chinese-plate-recognition</a><br>这个项目里面的”genplate.py”可以模拟生成车牌并附带坐标信息.</p><h3 id="判断车牌位置"><a href="#判断车牌位置" class="headerlink" title="判断车牌位置"></a>判断车牌位置</h3><p>用FasterRcnn训练模型，结果还可以</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>框出车牌之后不知道如何训练了Orz 具体的字符识别和车牌矫正都没有比较好的数据。</p><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>然后我就去找了一些开源项目，主要是EasyPR 和 HyperLPR。考量之后是HyperLPR比较好。<br><a href="https://github.com/zeusees/HyperLPR" target="_blank" rel="noopener">https://github.com/zeusees/HyperLPR</a><br>使用方法也非常简单，运行demo.py就可以了。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><p>文中提到的两个github项目的文档</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宁诺公众号大全</title>
      <link href="/2018/07/02/miunottingham_logos_gzh/"/>
      <url>/2018/07/02/miunottingham_logos_gzh/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>此博文解释权由MiuNottingham所有。</p><a id="more"></a>    <div id="aplayer-SwkHLwgh" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="548841578" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="LOGO图"><a href="#LOGO图" class="headerlink" title="LOGO图"></a>LOGO图</h2><p><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0702/merged_output.jpg" alt="logos"></p><p><a href="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0702/merged.png" target="_blank" rel="noopener">高清版点此</a></p><h2 id="链接列表"><a href="#链接列表" class="headerlink" title="链接列表"></a>链接列表</h2><p><strong>部分非微信订阅号账户此处链接无效，会在后期更新中改进。</strong></p><h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Enactus UNNC" target="_blank" rel="noopener">Enactus UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=HealthyUunnc" target="_blank" rel="noopener">HealthyUunnc</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=iSSocUNNC" target="_blank" rel="noopener">iSSocUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NUTSChina" target="_blank" rel="noopener">NUTSChina</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=SESA" target="_blank" rel="noopener">SESA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=SPDPO诺丁汉" target="_blank" rel="noopener">SPDPO诺丁汉</a><br><a href="http://open.weixin.qq.com/qr/code?username=unnc-ssc" target="_blank" rel="noopener">SSC</a><br><a href="http://open.weixin.qq.com/qr/code?username=unncsu" target="_blank" rel="noopener">UNNCStudentsUnion</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC青年志愿者协会" target="_blank" rel="noopener">UNNC青年志愿者协会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学校友会" target="_blank" rel="noopener">宁波诺丁汉大学校友会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺FinanceClub" target="_blank" rel="noopener">宁诺FinanceClub</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺NewsAgency" target="_blank" rel="noopener">宁诺NewsAgency</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC校园大使" target="_blank" rel="noopener">UNNC校园大使</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺校团委" target="_blank" rel="noopener">宁诺校团委</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺研究生联合会" target="_blank" rel="noopener">宁诺研究生联合会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺艺术团" target="_blank" rel="noopener">宁诺艺术团</a><br><a href="http://open.weixin.qq.com/qr/code?username=UNNC_ACCAClub" target="_blank" rel="noopener">中国华东区ACCA Club</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=学生会SUSU" target="_blank" rel="noopener">学生会SUSU(福利向)</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCNUSA" target="_blank" rel="noopener">UNNC_BSA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=我们的VAV" target="_blank" rel="noopener">我们的VAV</a><br><a href="http://open.weixin.qq.com/qr/code?username=AIESECUNNC" target="_blank" rel="noopener">AIESEC 诺丁汉</a></p><h3 id="不方便分类"><a href="#不方便分类" class="headerlink" title="不方便分类"></a>不方便分类</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=hikinfinite" target="_blank" rel="noopener">行者无疆(Enactus UNNC)</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=unnc_Uzone" target="_blank" rel="noopener">unnc_Uzone</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺管弦乐团" target="_blank" rel="noopener">宁诺交响乐团</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC纪念品商店" target="_blank" rel="noopener">UNNC纪念品商店</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Peekaboo_UNNC" target="_blank" rel="noopener">Peekaboo_UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC风扇研究" target="_blank" rel="noopener">UNNC风扇研究</a><br><a href="http://open.weixin.qq.com/qr/code?username=Ujoyenjoy" target="_blank" rel="noopener">Ujoy</a><br><a href="http://open.weixin.qq.com/qr/code?username=PixelNB666" target="_blank" rel="noopener">Pixel</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=YEA青创联盟UNNC分会" target="_blank" rel="noopener">YEA青创联盟UNNC分会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC脱单机器人" target="_blank" rel="noopener">UNNC脱单机器人</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=传球计划" target="_blank" rel="noopener">传球计划</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC毕业季" target="_blank" rel="noopener">UNNC毕业季</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=1010DoubleTens" target="_blank" rel="noopener">1010DoubleTens</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=ChinaLifeCycle" target="_blank" rel="noopener">ChinaLifeCycle</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC纪念品商店" target="_blank" rel="noopener">UNNC纪念品商店</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=老白在宁诺" target="_blank" rel="noopener">老白在宁诺</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=英国诺丁汉市政厅" target="_blank" rel="noopener">英国诺丁汉市政厅</a><br><a href="http://open.weixin.qq.com/qr/code?username=unncxs151" target="_blank" rel="noopener">宁诺萧山微信平台-壹伍壹公里</a><br><a href="http://open.weixin.qq.com/qr/code?username=ShuffleCrew" target="_blank" rel="noopener">ShuffleCrew</a></p><h3 id="学校官方公众号"><a href="#学校官方公众号" class="headerlink" title="学校官方公众号"></a>学校官方公众号</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=ResidentialCollege" target="_blank" rel="noopener">ResidentialCollege</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC宁诺英语语言教学中心" target="_blank" rel="noopener">UNNC宁诺英语语言教学中心</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=SEO学生发展中心" target="_blank" rel="noopener">SEO学生发展中心</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCSports" target="_blank" rel="noopener">UNNCSports</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCTheHub" target="_blank" rel="noopener">UNNCTheHub</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学ITServices" target="_blank" rel="noopener">宁波诺丁汉大学ITServices</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学理工学院" target="_blank" rel="noopener">宁波诺丁汉大学理工学院</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学人文社科学院FHSS" target="_blank" rel="noopener">宁波诺丁汉大学人文社科学院FHSS</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学图书馆" target="_blank" rel="noopener">宁波诺丁汉大学图书馆</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学招生办" target="_blank" rel="noopener">宁波诺丁汉大学招生办</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺商学院" target="_blank" rel="noopener">宁诺商学院</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺小U" target="_blank" rel="noopener">宁诺小U</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺校团委" target="_blank" rel="noopener">宁诺校团委</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺研究生联合会" target="_blank" rel="noopener">宁诺研究生联合会</a></p><h3 id="社团"><a href="#社团" class="headerlink" title="社团"></a>社团</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=CIMA_UNNC" target="_blank" rel="noopener">CIMA_UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=DiversityUNNC" target="_blank" rel="noopener">DiversityUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=FashionSociety" target="_blank" rel="noopener">FashionSociety</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Ningbo U.F.O" target="_blank" rel="noopener">Ningbo U.F.O</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NottinGreen" target="_blank" rel="noopener">NottinGreen</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=MUNAUNNC" target="_blank" rel="noopener">MUNA · UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=RANGERUNNC" target="_blank" rel="noopener">RANGERUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=TEDxUNNC" target="_blank" rel="noopener">TEDxUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=TEP" target="_blank" rel="noopener">TEP</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=TK199" target="_blank" rel="noopener">TK199</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=unnc 开拓者" target="_blank" rel="noopener">unnc 开拓者</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁记Nottingzine" target="_blank" rel="noopener">诺丁记Nottingzine</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCBoardGameClub" target="_blank" rel="noopener">UNNCBoardGameClub</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCKartingo" target="_blank" rel="noopener">UNNCKartingo</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCKoreansociety" target="_blank" rel="noopener">UNNCKoreansociety</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCFilmAssociation" target="_blank" rel="noopener">UNNCFilmAssociation</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCPhotography" target="_blank" rel="noopener">UNNCPhotography</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCSA" target="_blank" rel="noopener">UNNCSA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC爱中华文化社" target="_blank" rel="noopener">UNNC爱中华文化社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC壁球社" target="_blank" rel="noopener">UNNC壁球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC丶Magic丶Society" target="_blank" rel="noopener">UNNC丶Magic丶Society</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC动漫社" target="_blank" rel="noopener">UNNC动漫社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC国球社" target="_blank" rel="noopener">UNNC国球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC合气道社团" target="_blank" rel="noopener">UNNC合气道社团</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC剑道社" target="_blank" rel="noopener">UNNC剑道社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC口才与演讲社" target="_blank" rel="noopener">UNNC口才与演讲社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC篮球社" target="_blank" rel="noopener">UNNC篮球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC轮滑社" target="_blank" rel="noopener">UNNC轮滑社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC魔幻厨房社" target="_blank" rel="noopener">UNNC魔幻厨房社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC诺宁平安" target="_blank" rel="noopener">UNNC诺宁平安</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC棋社" target="_blank" rel="noopener">UNNC棋社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC拳击社" target="_blank" rel="noopener">UNNC拳击社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC日语交流社ACT2" target="_blank" rel="noopener">UNNC日语交流社ACT2</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC商英社" target="_blank" rel="noopener">UNNC商英社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC书画社" target="_blank" rel="noopener">UNNC书画社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC书友会" target="_blank" rel="noopener">UNNC书友会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC跆拳道社" target="_blank" rel="noopener">UNNC跆拳道社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC天协" target="_blank" rel="noopener">UNNC天协</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC现视研" target="_blank" rel="noopener">UNNC现视研</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC小吉他社" target="_blank" rel="noopener">UNNC小吉他社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC音乐协会" target="_blank" rel="noopener">UNNC音乐协会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC羽毛球社" target="_blank" rel="noopener">UNNC羽毛球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC中文辩论社" target="_blank" rel="noopener">UNNC中文辩论社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=unnc中文角" target="_blank" rel="noopener">unnc中文角</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC足球社" target="_blank" rel="noopener">UNNC足球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=艾话剧社idrama" target="_blank" rel="noopener">艾话剧社idrama</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=壁球社UNNC" target="_blank" rel="noopener">壁球社UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=魔方社UNNC" target="_blank" rel="noopener">魔方社UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC旅游" target="_blank" rel="noopener">UNNC旅游</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC_PA" target="_blank" rel="noopener">UNNC_PA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCAIR" target="_blank" rel="noopener">UNNCAIR</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺DIY" target="_blank" rel="noopener">宁诺DIY</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺ESA" target="_blank" rel="noopener">宁诺ESA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺PRA" target="_blank" rel="noopener">宁诺PRA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺IMA学术平台" target="_blank" rel="noopener">宁诺IMA学术平台</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=insightTALK" target="_blank" rel="noopener">insightTALK</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NDUC_UNNC" target="_blank" rel="noopener">NDUC_UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCDBC" target="_blank" rel="noopener">UNNCDBC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCHolmes" target="_blank" rel="noopener">UNNCHolmes</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁汉排球" target="_blank" rel="noopener">诺丁汉排球</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺智力谜题联盟" target="_blank" rel="noopener">宁诺智力谜题联盟</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁SHARE" target="_blank" rel="noopener">诺丁SHARE</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁汉WEAVER" target="_blank" rel="noopener">诺丁汉WEAVER</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=职来职往 宁诺职协" target="_blank" rel="noopener">职来职往 宁诺职协</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺CPU" target="_blank" rel="noopener">宁诺CPU</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺滑板俱乐部" target="_blank" rel="noopener">宁诺滑板俱乐部</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺健身社" target="_blank" rel="noopener">宁诺健身社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NPCC" target="_blank" rel="noopener">NPCC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC万科俱乐部" target="_blank" rel="noopener">UNNC万科俱乐部</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Adventure-Sports" target="_blank" rel="noopener">CANN</a></p><h1 id="一些想说的"><a href="#一些想说的" class="headerlink" title="一些想说的"></a>一些想说的</h1><p>我们做这个东西，并没有和任何人去做过什么营销，目的在于方便UNNCer查阅UNNC-related的微信公众号。在公众号的挑选过程中，商业营销号我们是第一个避免的，如果漏掉了你所在的团体，而且你所在的团体的确有其价值，请通过下面的联系方式联系我们。</p><h1 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h1><p>Email: <a href="mailto://breakertt@outlook.com">breakertt@outlook.com</a><br>欢迎报错</p>]]></content>
      
      
      <categories>
          
          <category> Media </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> UNNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改(二次开发)FaceNet为己用 - 我的人脸识别学习笔记03 - 完结篇</title>
      <link href="/2018/06/22/face_recognition_03/"/>
      <url>/2018/06/22/face_recognition_03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>魔改即是正义！</p><a id="more"></a>    <div id="aplayer-MAWALlWj" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="474574924" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p><em>本文写于年轻人(也就是我)的第一次加班(谁让我在下班前开始了神经网络的训练呢)</em></p><p>我的魔改成果 <a href="https://github.com/imaginebreake/face_recognition_with_TCPsocket" target="_blank" rel="noopener">face_recognition_with_TCPsocket</a><br>顺便上个逻辑图 <img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0621/FRWTS.png" alt="None"></p><h2 id="寻找志同道合者并沆瀣一气-不是"><a href="#寻找志同道合者并沆瀣一气-不是" class="headerlink" title="寻找志同道合者并沆瀣一气(不是"></a>寻找志同道合者并沆瀣一气(不是</h2><p>根据学习笔记02，我已经对FaceNet的使用有了初步的了解。FaceNet自带的Demo用来做人脸数据库并识别人脸已经是很完善的了，所以需要做的改动并没有想象的那么多。我第一步要达到的是能在本地提取一个人并输入照片的时候可以返回框出人脸并带上人名的图像，基于这个目的，我去Github上搜索了一些同样是基于FaceNet二次开发的项目。</p><p>首先找到的是shanren7的一个实时人脸识别的项目，这个项目和我需要的基本一致，但是问题有二:</p><ol><li>只能输出一个人QAQ</li><li>用的预训练模型并不是davidsandberg/facenet内提供的</li></ol><p>然后我继续寻找，找到了借鉴了shanren7项目开发的另一个项目<a href="https://github.com/bearsprogrammer/real-time-deep-face-recognition/" target="_blank" rel="noopener">bearsprogrammer/real-time-deep-face-recognition</a>.这个项目正好解决了前一个提到的两个问题，但是同时也出现了一些其他的问题.</p><ol><li>开发者用Python程序内定义好的list来储存人名，要实时更新并不方便。</li><li>这个系统是纯本地的，但是我要做的系统是可以远程训练和识别的。</li></ol><p>其中问题一其实只是一个小问题，很快就能搞定；而问题二基本上是开发一个新功能了，工作量比较大，也摸了好几天。</p><p>需要一提的是，这两个项目的主要的Detect的程序也是由FaceNet的demo修改而来。</p><p>那接下来就来对这个项目进行进一步的开发！</p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>对于问题一的解决，在数据量不大的时候最好的方案就是把这个list单独搞一个文本文件，在每次识别的时候读取为list(数据量上去就要用数据库了)。选择有两个，json和csv，因为我这个字段只有一个编号和人名，用csv比较清爽所以就这么决定了。Python对csv的调用非常简单了，代码如下:</p><p><strong>读取</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"./models/human_name.csv"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    human_name_reader = csv.reader(f)</span><br><span class="line">    HumanNames = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> human_name_reader]</span><br><span class="line">    <span class="keyword">del</span> HumanNames[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br><strong>追加</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"./models/human_name.csv"</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str(count).zfill(<span class="number">6</span>) + <span class="string">","</span> + name + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><br>问题一就这样解决了!</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="远程检测"><a href="#远程检测" class="headerlink" title="远程检测"></a>远程检测</h3><p>在我把问题一解决之后，老板说:那你给这个项目加个Socket，然后我就一脸懵逼:Socket是啥???然后我就去百度了一波。Socket其实是一种对TCP/IP的封装，要给我的项目加上Socket，也就是加上通过网络检测和训练的功能。C我是不太熟的，Python也有现成的Socket库，那就用Python了。<br>关于Python上Socket的编写，我很大程度上参考了简书上的<a href="https://www.jianshu.com/p/2a4b859e05df" target="_blank" rel="noopener">一篇文章</a>,同样都是传输图像。<br>啃了一个下午，总算是把检测部分的代码搞了出来，并在本机检测通过，中间有几个我觉得值得一提的小波折。</p><p>1.图像文件之后发送过去之后,文件体积一致,但是文件头里面多了一些之前的传输信息,花了一个小时debug总算是找到了问题所在。<br><strong>修改前</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = sock.recv(SIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data :</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'reach the end of file'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> data == <span class="string">'begin to send'</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'create file'</span></span><br><span class="line">        checkFile()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br></pre></td></tr></table></figure><br><strong>修改后</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = connection.recv(SIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data :</span><br><span class="line">        print(<span class="string">"reach the end of file"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> data == <span class="string">'begin to send'</span>:</span><br><span class="line">        print(<span class="string">"create file"</span>)</span><br><span class="line">        checkFile()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br></pre></td></tr></table></figure><br>问题就在于没有对socket接收的缓存数据进行清空</p><p>2.Ubuntu的防火墙:要现在本机的防火墙上先开放要使用的端口</p><p>本机测试通过了,我就开始拿笔记本远程调试,中间出现了一些因为python版本导致的问题，就不具体说了，<a href="https://blog.csdn.net/yexiaohhjk/article/details/68066843" target="_blank" rel="noopener">请看此</a>,解决这个问题之后程序跑的十分顺利。</p><h3 id="远程登记人脸"><a href="#远程登记人脸" class="headerlink" title="远程登记人脸"></a>远程登记人脸</h3><p>我的想法是调用电脑的摄像头存下一系列照片然后打包成.zip发送给服务器，然后进行人脸对齐和特征的储存。中间基本上没遇到什么太大的问题。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>之前无论哪个操作，服务器端都是直接用Python调用命令，这样每次都是要重新打开一个TensorFlow的Session，耗时很不乐观。所以我决定人脸检测这部分一直使用同一个Session，训练的时候再重开另一个Session。<br>这样就会出现一个问题，就是每次人脸登记完之后要重新加载包含人名的.csv和包含人脸特征的.pkls,所以我在代码中添加了一个update的变量让程序知道是否要重新加载。<br>为了更好的交互，我第一次接触了Visual Studio并配好了Opencv，步履维艰的写下了自己人生中第一个C++程序，想必以后还有的是打交道的机会。这个C++的控制台小程序可以调用client_dete.py和client_train.py。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><a href="https://github.com/imaginebreake" target="_blank" rel="noopener">Github</a>里面总算是有了个不少是自己写的代码的项目，完结撒花！</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ol><li><a href="https://github.com/shanren7/real_time_face_recognition" target="_blank" rel="noopener">shanren7/real_time_face_recognition</a></li><li><a href="https://github.com/bearsprogrammer/real-time-deep-face-recognition/" target="_blank" rel="noopener">bearsprogrammer/real-time-deep-face-recognition</a></li><li><a href="https://blog.csdn.net/Pk_zsq/article/details/6087367" target="_blank" rel="noopener">TCP/IP、Http、Socket的区别</a></li><li><a href="https://www.jianshu.com/p/2a4b859e05df" target="_blank" rel="noopener">[毕设记录] python利用socket进行文件传输</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Face Recognition </tag>
            
            <tag> Computer Vision </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FaceNet使用记录 - 我的人脸识别学习笔记02</title>
      <link href="/2018/06/19/face_recognition_02/"/>
      <url>/2018/06/19/face_recognition_02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>即使是用别人的东西也花了好大的气力。</p><a id="more"></a><p>首先贴上FaceNet的github <a href="https://github.com/davidsandberg/facenet" target="_blank" rel="noopener">davidsandberg/facenet</a> <a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schroff_FaceNet_A_Unified_2015_CVPR_paper.pdf" target="_blank" rel="noopener">论文</a></p><h2 id="为什么是FaceNet"><a href="#为什么是FaceNet" class="headerlink" title="为什么是FaceNet?"></a>为什么是FaceNet?</h2><ol><li>机器环境<br>老板给的机器已经配好了 TensorFlow + Cuda, FaceNet所需的环境正好是这个 √</li><li>社区资源<br>Github上使用FaceNet进行二次开发的样例非常多<br>例如:<a href="https://github.com/shanren7/real_time_face_recognition" target="_blank" rel="noopener">shanren7</a> <a href="https://github.com/bearsprogrammer/real-time-deep-face-recognition/" target="_blank" rel="noopener">bearsprogrammer</a></li><li>识别率和预处理模型的提供<br>FaceNet提供的预处理模型在LFW测试数据集上的准确度已经达到了99.65%,并且提供了分别以 CASIA-WebFace 和 VGGFace2 为训练集的预处理模型.</li><li>功能性<br>人脸识别主要有两块，一个是对脸的识别，另一个是对人物的ID的识别.FaceNet在这两个功能上都有很好的完成度</li></ol><h2 id="FaceNet的基本使用-此节主要借鉴facenet的wiki"><a href="#FaceNet的基本使用-此节主要借鉴facenet的wiki" class="headerlink" title="FaceNet的基本使用(此节主要借鉴facenet的wiki)"></a>FaceNet的基本使用(此节主要借鉴facenet的<a href="https://github.com/davidsandberg/facenet/wiki/Train-a-classifier-on-own-images" target="_blank" rel="noopener">wiki</a>)</h2><p>此处已经默认装好了相关Python库以及Tensorflow</p><h3 id="1-克隆-FaceNet-的-Github-库"><a href="#1-克隆-FaceNet-的-Github-库" class="headerlink" title="1. 克隆 FaceNet 的 Github 库"></a>1. 克隆 FaceNet 的 Github 库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/davidsandberg/facenet.git</span><br></pre></td></tr></table></figure><h3 id="2-比对两个人脸的欧式距离"><a href="#2-比对两个人脸的欧式距离" class="headerlink" title="2. 比对两个人脸的欧式距离"></a>2. 比对两个人脸的欧式距离</h3><p>FaceNet是采用CNN神经网络将人脸图像映射到128维的欧几里得空间，我们可以根据两幅人像的欧几里得距离去判断两个人像的相似程度。两个人像之间的欧几里得距离越近，说明它们越相似。一般欧式距离小于1,就可以认为是同一个人。<br><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0619/999009-20170305161101282-1344836451.png" alt="None"><br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python compare.py models\<span class="number">20170511</span><span class="literal">-185253</span>\<span class="number">20170511</span><span class="literal">-185253</span> Cate_Blanchett_0001.png  Cate_Blanchett_0002.png</span><br></pre></td></tr></table></figure></p><h3 id="3-训练自己的数据"><a href="#3-训练自己的数据" class="headerlink" title="3. 训练自己的数据"></a>3. 训练自己的数据</h3><h4 id="训练集的结构"><a href="#训练集的结构" class="headerlink" title="训练集的结构"></a>训练集的结构</h4><p>训练集的结构如下，每个人都有独立的文件夹<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Aaron_Eckhart_0001.jpg</span><br><span class="line"></span><br><span class="line">Aaron_Guiel</span><br><span class="line">    Aaron_Guiel_0001.jpg</span><br><span class="line"></span><br><span class="line">Aaron_Patterson</span><br><span class="line">    Aaron_Patterson_0001.jpg</span><br><span class="line"></span><br><span class="line">Aaron_Peirsol</span><br><span class="line">    Aaron_Peirsol_0001.jpg</span><br><span class="line">    Aaron_Peirsol_0002.jpg</span><br><span class="line">    Aaron_Peirsol_0003.jpg</span><br><span class="line">    Aaron_Peirsol_0004.jpg</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><h4 id="剪切出人脸"><a href="#剪切出人脸" class="headerlink" title="剪切出人脸"></a>剪切出人脸</h4><p>FaceNet 提供了使用 MTCNN 对齐人脸的脚本 代码如下<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python src/align/align_dataset_mtcnn.py \</span><br><span class="line">~/datasets/my_dataset/origin \</span><br><span class="line">~/datasets/my_dataset/train \</span><br><span class="line">-<span class="literal">-image_size</span> <span class="number">182</span> \</span><br><span class="line">-<span class="literal">-margin</span> <span class="number">44</span></span><br></pre></td></tr></table></figure><br>加速多线程版：<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">4</span>&#125;; <span class="keyword">do</span> \</span><br><span class="line">python src/align/align_dataset_mtcnn.py \</span><br><span class="line">~/datasets/my_dataset/origin \</span><br><span class="line">~/datasets/my_dataset/train \</span><br><span class="line">-<span class="literal">-image_size</span> <span class="number">182</span> \</span><br><span class="line">-<span class="literal">-margin</span> <span class="number">44</span> \</span><br><span class="line">-<span class="literal">-random_order</span> \</span><br><span class="line">-<span class="literal">-gpu_memory_fraction</span> <span class="number">0.25</span> \</span><br><span class="line">&amp; done</span><br></pre></td></tr></table></figure></p><h4 id="训练-pkl"><a href="#训练-pkl" class="headerlink" title="训练.pkl"></a>训练.pkl</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python src/classifier.py TRAIN ~/datasets/my_dataset/train/ ~/models/model<span class="literal">-20170216</span><span class="literal">-091149</span>.pb ~/models/my_classifier.pkl -<span class="literal">-batch_size</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python src/classifier.py CLASSIFY ~/datasets/my_dataset/test/ ~/models/model<span class="literal">-20170216</span><span class="literal">-091149</span>.pb ~/models/my_classifier.pkl -<span class="literal">-batch_size</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>既然已经大概了解FaceNet怎么用了，就要开始真正的魔改应用之路了！下回见分晓。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/24837264" target="_blank" rel="noopener">谷歌人脸识别系统FaceNet解析</a></li><li><a href="https://blog.csdn.net/u013044310/article/details/79556099" target="_blank" rel="noopener">史上最全的FaceNet源码使用方法和讲解（一）（附预训练模型下载）</a></li><li><a href="https://blog.csdn.net/xingwei_09/article/details/79161931" target="_blank" rel="noopener">人脸识别（Facenet）</a></li><li><a href="https://www.cnblogs.com/xiaohuahua108/p/6505756.html" target="_blank" rel="noopener">FaceNet—深度学习与人脸识别的二次结合</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Face Recognition </tag>
            
            <tag> Computer Vision </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人脸识别的神经网络了解一下啦 - 我的人脸识别学习笔记01</title>
      <link href="/2018/06/07/face_recognition_01/"/>
      <url>/2018/06/07/face_recognition_01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>面向谷歌、百度、github、Stackoverflow编程</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想了一想，离高考结束也已经一年零几天了。在水校的一年也并没有学到什么，算是又荒废了一年光阴。因此决定建一个博客，督促自己不断学习而非继续碌碌无为。</p><p>期末考试大概是5月25日考完的，在家休息了大概一个星期之后，终于来到了实习单位，之前也略闻过计算机行业的办公方式，但亲眼看见却又是另外一种感觉了。实习是从6月4日开始的，到了boss便让我去了解一下人脸识别和神经网络方面的东西，特别指出了Faster R-CNN什么的，当然至今还是云里雾里。</p><p>既然老板让我去看，我便花了一个早上去看这是个什么东西。<br>要了解Faster R-CNN,还是要从图像识别和分类技术发展的祖先一步步来：<br><strong>CNN→R-CNN→Fast R-CNN→Faster R-CNN</strong></p><h2 id="一些神经网络"><a href="#一些神经网络" class="headerlink" title="一些神经网络"></a>一些神经网络</h2><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><p>CNN(ConvNet/卷积神经网络)是图像识别的初代算法，主要操作有以下几个，若想详细的了解，可以直接拉到最下看参考.<br>在我这个只了解一下理论暂不实践的半吊子看来主要有以下几步</p><ul><li><strong>卷积</strong> 也就是用不同滤波器对图像进行特征提取<img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200314000428.gif" alt="None"></li><li><strong>ReLU</strong> ReLU很操作很容易理解 就是把图像里面的每个像素的值范围进行再一次的框定 但是为什么要这么操作我至今也是一知半解</li><li><strong>池化</strong> 我的理解是对上一个卷积层的图像进行Downscale<img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200314000459.png" alt=""></li><li><strong>全连接层/多层感知器</strong> 组合多个层获得神经网络，这块是我最不懂的，至今毫无头绪</li><li><strong>无尽重复！</strong></li></ul><h3 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h3><p>R是Regions，从现在开始我们不仅可以知道这图片有啥，更能知道图片里面的东西位置在哪里了。<br>那么是如何做到的呢？</p><ul><li><strong>寻找候选框</strong> 对图片进行滑动窗口操作获得潜在的正确答案</li><li><strong>CNN</strong> 输入CNN神经网络，得到输出</li><li><strong>分类与边界回归</strong> 先得到正确的区域，显然正确答案会有很多种，所以我们需要边界回归，得到最终的精确答案<br><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0614/RCNN.png" alt=""></li></ul><p>事情很显然了，这样既浪费空间又浪费时间又浪费算力。</p><h3 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h3><p>其实这之前还有个SSP-Net，优点 1.多尺度输入图像 2.一次CNN，然后再去找正确答案。<br>然后整合了一些流程，具体的我也并没有非常明白，因为没有用tensorflow实实在在造过这个轮子。</p><h3 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h3><p>速度的问题其实还是在于选框上，所以干脆把选框也交给CNN，这就是Faster R-CNN了</p><h3 id="MTCNN"><a href="#MTCNN" class="headerlink" title="MTCNN"></a>MTCNN</h3><p>但是我要做的是人脸检测，目前人脸检测用的最多的还是MTCNN(OpenFace,FaceNet),和前面几个算法对于人脸进行了再次优化，算法流程如下。<img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0614/20170817161936858.jpg" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这便是我实习第一天看的东西了。<br>但是呢理解往往是相对容易的，但操作起来是举步维艰的。<br>如果是从头造轮子，我的数学以及编程功力都没到位，希望能在两年后的现在有这个能力吧。<br>因此我决定识别和模型搭建这块先用谷歌开源的FaceNet以及其提供的预处理算法开完成老板给我的任务，老板也表示了同意。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><p>1.<a href="https://blog.csdn.net/ruiyiin/article/details/77113973" target="_blank" rel="noopener">见过最好的神经网络CNN解释</a><br>2.<a href="https://blog.csdn.net/xyfengbo/article/details/70227173" target="_blank" rel="noopener">RCNN介绍</a><br>3.<a href="https://www.cnblogs.com/skyfsm/p/6806246.html" target="_blank" rel="noopener">基于深度学习的目标检测技术演进：R-CNN、Fast R-CNN、Faster R-CNN</a><br>4.<a href="https://blog.csdn.net/tinyzhao/article/details/53236191" target="_blank" rel="noopener">人脸检测：MTCNN</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Face Recognition </tag>
            
            <tag> Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
