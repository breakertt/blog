<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Baidupcs-web 在 apache2 上的反向代理配置</title>
      <link href="/2019/08/20/baidupcsgo-web-proxy/"/>
      <url>/2019/08/20/baidupcsgo-web-proxy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>此处省略一万句脏话。</p><a id="more"></a><p>最近被安利了一个webui版本的baidupcs-go，叫做BiaduPCS-Web，据说不错我就也来用用。</p><p>安装很容易，使用了GitHub上的一键脚本：<a href="https://github.com/user1121114685/baidupcsweb" target="_blank" rel="noopener">https://github.com/user1121114685/baidupcsweb</a></p><p>但是服务起来之后用的是5299端口，不太优雅对吧？那我就想着做个反代好了，也就是本文的重点了。</p><p>一开始我是想配一个类似于”<a href="http://server/pan/&quot;" target="_blank" rel="noopener">http://server/pan/&quot;</a>, 这样的子目录的反向代理的，但是这个软件不支持baseURL的配置以及路径都是写死的，那就只能单开一个域名给这个软件了。如果您使用的http服务器是nginx请看这里：<a href="https://github.com/liuzhuoling2011/baidupcs-web/issues/20" target="_blank" rel="noopener">请问如何用nginx进行反向代理</a>，caddy我也不太清楚，反正这篇文章讲的只有apache的。</p><p>这个软件有部分链接用的不是http，而是websocket，这就是问题所在了，查了不少资料，我们需要先开启用几个插件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a2enmod proxy</span><br><span class="line">a2enmod proxy_http</span><br><span class="line">a2enmod rewrite</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure><p>然后添加如下的新站点，只开了443的，80请自己改，内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">    ServerName pan.abc.com ######</span><br><span class="line"></span><br><span class="line">    SSLCertificateFile  &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;pan&#x2F;cert.pem ######</span><br><span class="line">    SSLCertificateKeyFile &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;pan&#x2F;key.pem ######</span><br><span class="line">    SSLCertificateChainFile &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;pan&#x2F;chain.pem ######</span><br><span class="line"></span><br><span class="line">    SSLEngine on</span><br><span class="line"></span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    RewriteEngine On</span><br><span class="line"></span><br><span class="line">    RewriteCond %&#123;HTTP:Upgrade&#125; &#x3D; websocket [NC]</span><br><span class="line">    RewriteCond %&#123;HTTP:CONNECTION&#125; ^Upgrade$ [NC]</span><br><span class="line">    RewriteRule &#x2F;ws(.*)           ws:&#x2F;&#x2F;localhost:5299&#x2F;ws$1 [P,L]</span><br><span class="line">    RequestHeader set X-Forwarded-Proto &quot;https&quot;</span><br><span class="line"></span><br><span class="line">    &lt;Location &#x2F;ws&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">        ProxyPassReverse ws:&#x2F;&#x2F;127.0.0.1:5299&#x2F;ws</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location &#x2F;&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">        ProxyPass http:&#x2F;&#x2F;localhost:5299&#x2F;</span><br><span class="line">        ProxyPassReverse &#x2F;</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>简单讲一下，这边把当http请求需要升级为ws请求时，把反代的头改成了ws，然后就可以成功访问了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Ubuntu18.04 上使用 clash 部署旁路代理网关（透明代理）</title>
      <link href="/2019/08/20/clash_gateway/"/>
      <url>/2019/08/20/clash_gateway/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Apple TV 4K 到货前的准备工作</p><a id="more"></a><p>最近打算购入一台 Apple TV 4K, 又因为众所周知的原因, Apple TV 4k 在没有代理的情况下是根本没法用的，所以就萌生了拿之前买的nuc来做一个旁路代理网关的想法。</p><p>在Ubuntu上部署一个透明代理网关主要是三块：安装clash, 简单配置clash， 高级配置clash, 配置iptables转发。</p><h1 id="安装clash"><a href="#安装clash" class="headerlink" title="安装clash"></a>安装clash</h1><p>使用clash的最主要原因是它自带redir服务，且使用go语言开发安装非常方便。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v0.15.0/clash-linux-amd64-v0.15.0.gz #下载二进制文件</span><br><span class="line">gzip -d clash-linux-amd64-v0.15.0.gz #解压</span><br><span class="line">mv clash-linux-amd64-v0.15.0 /usr/local/bin/clash #移动到bin</span><br><span class="line">chmod +x /usr/local/bin/clash #添加执行权限</span><br></pre></td></tr></table></figure><p>然后我们把clash设置成service，下面是我的<code>/etc/systemd/system/clash.service</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;clash service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;root</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;clash</span><br><span class="line">Restart&#x3D;on-failure # or always, on-abort, etc</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>然后我们把clash激活为开机启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable clash</span><br></pre></td></tr></table></figure><h1 id="简单配置clash"><a href="#简单配置clash" class="headerlink" title="简单配置clash"></a>简单配置clash</h1><p>在这个环节中主要是简单配置clash及其dashboard，让其能作为一个局域网的代理服务器存在。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.config/</span><br><span class="line">mkdir clash</span><br><span class="line">touch config.yaml</span><br><span class="line">wget https://github.com/haishanh/yacd/archive/gh-pages.zip</span><br><span class="line">unzip gh-pages.zip</span><br><span class="line">mv yacd-gh-pages/ dashboard/</span><br></pre></td></tr></table></figure><p>然后我们给<code>config.yaml</code>加上内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">external-ui:</span> <span class="string">dashboard</span></span><br><span class="line"><span class="comment">#此处内容请安装一个gui版本的clash然后在里面配置好代理然后抄过来</span></span><br><span class="line"><span class="attr">Proxy:</span> </span><br><span class="line"><span class="attr">Proxy Group:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">Rule:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">IP-CIDR,127.0.0.0/8,DIRECT</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">IP-CIDR,192.168.0.0/16,DIRECT</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">FINAL,Proxy</span></span><br></pre></td></tr></table></figure><p>然后我们执行<code>service clash start</code>，就有一个可以使用的局域网代理服务器了，甚至可以在浏览器里面访问<code>http://serverip:9090/ui/</code>来调试clash！如果是公网的话我推荐secret处加上内容以保证安全性。</p><h1 id="高级配置clash"><a href="#高级配置clash" class="headerlink" title="高级配置clash"></a>高级配置clash</h1><p>这里的配置主要是两块：</p><h2 id="clash-dns"><a href="#clash-dns" class="headerlink" title="clash dns"></a>clash dns</h2><p>因为我们要拿clash做一个透明网关，那么dns服务必然是一个问题，clash自带的dns服务很神奇，我研究了一个上午，如果想了解可以看这两篇文章：<a href="https://github.com/Fndroid/clash_for_windows_pkg/wiki/DNS%E6%B1%A1%E6%9F%93%E5%AF%B9Clash%EF%BC%88for-Windows%EF%BC%89%E7%9A%84%E5%BD%B1%E5%93%8D" target="_blank" rel="noopener">DNS污染对Clash（for Windows）的影响</a>，<a href="https://blog.skk.moe/post/alternate-surge-koolclash-as-gateway/" target="_blank" rel="noopener">代替 Surge 增强模式——使用 KoolClash 作为代理网关</a></p><p>最后我用的就是第一篇文章中所用到的方案，在clash的设置文件中加入了以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">redir-host</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tls://dns.rubyfish.cn:853'</span></span><br><span class="line">  <span class="attr">fallback:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tls://1.1.1.1:853'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tcp://1.1.1.1:53'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tcp://208.67.222.222:443'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'tls://dns.google'</span></span><br></pre></td></tr></table></figure><p>为什么不用fake-ip呢？因为我觉得目前的redir-host方案足够我本人使用了。</p><h2 id="国内外分流"><a href="#国内外分流" class="headerlink" title="国内外分流"></a>国内外分流</h2><p>clash这个软件的一大特色就是他的分流功能，所以我想还是得用起来，不说好用，至少可以堪用。</p><p>然后我就找到了网上已经有现成的规则文件了，可以抄过来用。</p><p>如果需要分流的话就把<a href="https://github.com/Hackl0us/SS-Rule-Snippet/blob/master/LAZY_RULES/clash.yaml" target="_blank" rel="noopener">这个文件</a>中的rules部分抄进目前的<code>config.yaml</code>。</p><h1 id="配置iptables转发"><a href="#配置iptables转发" class="headerlink" title="配置iptables转发"></a>配置iptables转发</h1><p>这是我们的最后一步，主要是使用iptables配置nat的转发到clash，很大一部分都是参考了</p><p><a href="https://toutyrater.github.io/app/transparent_proxy.html" target="_blank" rel="noopener">Clash作为透明代理是否有意义？</a></p><p><a href="https://github.com/Dreamacro/clash/issues/158" target="_blank" rel="noopener">透明代理/路由器翻墙· V2Ray 配置指南|V2Ray 白话文教程</a></p><p>这两篇文章，最后得出的规则如下，这个规则网关本身是不走代理的，反正我可以用proxychains-ng对本级进行代理：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -N clash</span><br><span class="line">iptables -t nat -A clash -d 192.168.0.0&#x2F;16 -j RETURN</span><br><span class="line">iptables -t nat -A clash -p tcp -j RETURN -m mark --mark 0xff</span><br><span class="line">iptables -t nat -A clash -p tcp -j REDIRECT --to-ports 7892</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j clash</span><br></pre></td></tr></table></figure><p>当然我们还不希望这些规则重启就没，那么我们就需要安装一些辅助工具来持久化iptables的规则：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install iptables-persistent netfilter-persistent</span><br><span class="line">netfilter-persistent save</span><br><span class="line">netfilter-persistent start</span><br><span class="line">iptables-save  &gt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure><p>具体可以看这里：<a href="https://askubuntu.com/questions/1052919/iptables-reload-restart-on-ubuntu-18-04" target="_blank" rel="noopener">Iptables reload/restart on Ubuntu 18.04</a></p><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>那么就可以把旁路网关地址以及dns设置在需要的机器上了！我也要开始下单 Apple TV 了！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AegiSub和FFmpeg为视频打上字幕(啊？Pr是什么？)</title>
      <link href="/2018/10/16/encoded_subtitle/"/>
      <url>/2018/10/16/encoded_subtitle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>SESA干培。</p><a id="more"></a><h2 id="工具的准备"><a href="#工具的准备" class="headerlink" title="工具的准备"></a>工具的准备</h2><h3 id="1-Aegisub"><a href="#1-Aegisub" class="headerlink" title="1. Aegisub"></a>1. <strong>Aegisub</strong></h3><p>请访问<a href="http://www.aegisub.org/" target="_blank" rel="noopener">Aegisub官网</a>对应系统进行下载以及安装</p><h3 id="2-FFMpeg"><a href="#2-FFMpeg" class="headerlink" title="2. FFMpeg"></a>2. <strong>FFMpeg</strong></h3><p>Windows用户:</p><ul><li>下载FFMpeg: <a href="https://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">https://ffmpeg.zeranoe.com/builds/</a> (请选择static版本)</li><li>解压FFmpeg: 把下载好的压缩包解压到C:\ffmpeg目录下</li><li>配置环境变量: 按照<a href="https://jingyan.baidu.com/article/b24f6c82cba6dc86bfe5da9f.html" target="_blank" rel="noopener">这篇文章</a>将刚才的目录添加入Path</li><li>测试运行: 按WIN+R,输入CMD,在跳出来的终端窗口中输入<code>ffmpeg -version</code> 如有信息则说明安装成功</li></ul><p>MAC用户:</p><ul><li>下载安装homebrew: 打开Termial,输入<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code> </li><li>下载安装FFMpeg: 继续在Termial中输入 <code>brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265</code></li><li>测试运行: 继续Terminal中输入<code>ffmpeg -version</code> 如有信息则说明安装成功</li></ul><h2 id="打时间轴-得到到字幕文件"><a href="#打时间轴-得到到字幕文件" class="headerlink" title="打时间轴,得到到字幕文件"></a>打时间轴,得到到字幕文件</h2><p>请参考以下视频进行相关学习,以懂得如何为文本配上时间轴并得到.ass字幕文件为目标.样式和特效如果自己有感兴趣的话可以深究一下,这是一个无底洞.<br><a href="https://www.bilibili.com/video/av2345646/" target="_blank" rel="noopener">https://www.bilibili.com/video/av2345646/</a><br><a href="https://www.bilibili.com/video/av32482188/" target="_blank" rel="noopener">https://www.bilibili.com/video/av32482188/</a></p><h2 id="把字幕压进视频轨"><a href="#把字幕压进视频轨" class="headerlink" title="把字幕压进视频轨"></a>把字幕压进视频轨</h2><p>用cd命令将终端位置调到视频文件夹,下面是一个例子.<br><figure class="highlight plain"><figcaption><span>C:\Users\break\Videos```</span></figcaption><table><tr><td class="code"><pre><span class="line">用下面这个命令把字幕烧进视频流,其中文件名按照你的文件名进行改动.</span><br><span class="line">&#96;&#96;&#96;ffmpeg -i mymovie.mp4 -vf ass&#x3D;subtitles.ass mysubtitledmovie.mp4</span><br></pre></td></tr></table></figure><br>如果遇到了什么问题,请打开参考文献[4]看一下其中有没有提到,如果有很奇怪的问题欢迎<a href="mailto://admin@ib32.com">Email我</a>.</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ol><li><a href="https://www.cnblogs.com/xiezhidong/p/6924775.html" target="_blank" rel="noopener">FFmpeg安装（windows环境）</a></li><li><a href="https://www.jianshu.com/p/0b1c98a28fd4" target="_blank" rel="noopener">在mac os下使用FFmpeg</a></li><li><a href="https://stackoverflow.com/questions/8672809/use-ffmpeg-to-add-text-subtitles" target="_blank" rel="noopener">Use ffmpeg to add text subtitles - StackOverflow</a></li><li><a href="http://www.yaosansi.com/post/ffmpeg-burn-subtitles-into-video/" target="_blank" rel="noopener">使用FFmpeg将字幕文件集成到视频文件</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Media </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
            <tag> VideoTech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车牌识别</title>
      <link href="/2018/10/14/lisense_plate_recognition/"/>
      <url>/2018/10/14/lisense_plate_recognition/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一筹莫展。</p><a id="more"></a><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>我一开始是想自己去训练这个车牌识别的的 这是Part1的主要内容</p><h3 id="生成车牌"><a href="#生成车牌" class="headerlink" title="生成车牌"></a>生成车牌</h3><p>为什么要生成车牌，因为车牌和人脸不一样，车牌的数据比较隐私，国内并没有说有任何公开的 可以拿来训练车牌的数据集，也没有时间慢慢去收集、标注，只能自己来生成。<br><a href="https://github.com/szad670401/end-to-end-for-chinese-plate-recognition" target="_blank" rel="noopener">end-to-end-for-chinese-plate-recognition</a><br>这个项目里面的”genplate.py”可以模拟生成车牌并附带坐标信息.</p><h3 id="判断车牌位置"><a href="#判断车牌位置" class="headerlink" title="判断车牌位置"></a>判断车牌位置</h3><p>用FasterRcnn训练模型，结果还可以</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>框出车牌之后不知道如何训练了Orz 具体的字符识别和车牌矫正都没有比较好的数据。</p><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>然后我就去找了一些开源项目，主要是EasyPR 和 HyperLPR。考量之后是HyperLPR比较好。<br><a href="https://github.com/zeusees/HyperLPR" target="_blank" rel="noopener">https://github.com/zeusees/HyperLPR</a><br>使用方法也非常简单，运行demo.py就可以了。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><p>文中提到的两个github项目的文档</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宁诺公众号大全</title>
      <link href="/2018/07/02/miunottingham_logos_gzh/"/>
      <url>/2018/07/02/miunottingham_logos_gzh/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>此博文解释权由MiuNottingham所有。</p><a id="more"></a>    <div id="aplayer-agpxMgIN" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="548841578" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="LOGO图"><a href="#LOGO图" class="headerlink" title="LOGO图"></a>LOGO图</h2><p><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0702/merged_output.jpg" alt="logos"></p><p><a href="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0702/merged.png" target="_blank" rel="noopener">高清版点此</a></p><h2 id="链接列表"><a href="#链接列表" class="headerlink" title="链接列表"></a>链接列表</h2><p><strong>部分非微信订阅号账户此处链接无效，会在后期更新中改进。</strong></p><h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Enactus UNNC" target="_blank" rel="noopener">Enactus UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=HealthyUunnc" target="_blank" rel="noopener">HealthyUunnc</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=iSSocUNNC" target="_blank" rel="noopener">iSSocUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NUTSChina" target="_blank" rel="noopener">NUTSChina</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=SESA" target="_blank" rel="noopener">SESA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=SPDPO诺丁汉" target="_blank" rel="noopener">SPDPO诺丁汉</a><br><a href="http://open.weixin.qq.com/qr/code?username=unnc-ssc" target="_blank" rel="noopener">SSC</a><br><a href="http://open.weixin.qq.com/qr/code?username=unncsu" target="_blank" rel="noopener">UNNCStudentsUnion</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC青年志愿者协会" target="_blank" rel="noopener">UNNC青年志愿者协会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学校友会" target="_blank" rel="noopener">宁波诺丁汉大学校友会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺FinanceClub" target="_blank" rel="noopener">宁诺FinanceClub</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺NewsAgency" target="_blank" rel="noopener">宁诺NewsAgency</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC校园大使" target="_blank" rel="noopener">UNNC校园大使</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺校团委" target="_blank" rel="noopener">宁诺校团委</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺研究生联合会" target="_blank" rel="noopener">宁诺研究生联合会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺艺术团" target="_blank" rel="noopener">宁诺艺术团</a><br><a href="http://open.weixin.qq.com/qr/code?username=UNNC_ACCAClub" target="_blank" rel="noopener">中国华东区ACCA Club</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=学生会SUSU" target="_blank" rel="noopener">学生会SUSU(福利向)</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCNUSA" target="_blank" rel="noopener">UNNC_BSA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=我们的VAV" target="_blank" rel="noopener">我们的VAV</a><br><a href="http://open.weixin.qq.com/qr/code?username=AIESECUNNC" target="_blank" rel="noopener">AIESEC 诺丁汉</a></p><h3 id="不方便分类"><a href="#不方便分类" class="headerlink" title="不方便分类"></a>不方便分类</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=hikinfinite" target="_blank" rel="noopener">行者无疆(Enactus UNNC)</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=unnc_Uzone" target="_blank" rel="noopener">unnc_Uzone</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺管弦乐团" target="_blank" rel="noopener">宁诺交响乐团</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC纪念品商店" target="_blank" rel="noopener">UNNC纪念品商店</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Peekaboo_UNNC" target="_blank" rel="noopener">Peekaboo_UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC风扇研究" target="_blank" rel="noopener">UNNC风扇研究</a><br><a href="http://open.weixin.qq.com/qr/code?username=Ujoyenjoy" target="_blank" rel="noopener">Ujoy</a><br><a href="http://open.weixin.qq.com/qr/code?username=PixelNB666" target="_blank" rel="noopener">Pixel</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=YEA青创联盟UNNC分会" target="_blank" rel="noopener">YEA青创联盟UNNC分会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC脱单机器人" target="_blank" rel="noopener">UNNC脱单机器人</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=传球计划" target="_blank" rel="noopener">传球计划</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC毕业季" target="_blank" rel="noopener">UNNC毕业季</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=1010DoubleTens" target="_blank" rel="noopener">1010DoubleTens</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=ChinaLifeCycle" target="_blank" rel="noopener">ChinaLifeCycle</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC纪念品商店" target="_blank" rel="noopener">UNNC纪念品商店</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=老白在宁诺" target="_blank" rel="noopener">老白在宁诺</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=英国诺丁汉市政厅" target="_blank" rel="noopener">英国诺丁汉市政厅</a><br><a href="http://open.weixin.qq.com/qr/code?username=unncxs151" target="_blank" rel="noopener">宁诺萧山微信平台-壹伍壹公里</a><br><a href="http://open.weixin.qq.com/qr/code?username=ShuffleCrew" target="_blank" rel="noopener">ShuffleCrew</a></p><h3 id="学校官方公众号"><a href="#学校官方公众号" class="headerlink" title="学校官方公众号"></a>学校官方公众号</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=ResidentialCollege" target="_blank" rel="noopener">ResidentialCollege</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC宁诺英语语言教学中心" target="_blank" rel="noopener">UNNC宁诺英语语言教学中心</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=SEO学生发展中心" target="_blank" rel="noopener">SEO学生发展中心</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCSports" target="_blank" rel="noopener">UNNCSports</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCTheHub" target="_blank" rel="noopener">UNNCTheHub</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学ITServices" target="_blank" rel="noopener">宁波诺丁汉大学ITServices</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学理工学院" target="_blank" rel="noopener">宁波诺丁汉大学理工学院</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学人文社科学院FHSS" target="_blank" rel="noopener">宁波诺丁汉大学人文社科学院FHSS</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学图书馆" target="_blank" rel="noopener">宁波诺丁汉大学图书馆</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁波诺丁汉大学招生办" target="_blank" rel="noopener">宁波诺丁汉大学招生办</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺商学院" target="_blank" rel="noopener">宁诺商学院</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺小U" target="_blank" rel="noopener">宁诺小U</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺校团委" target="_blank" rel="noopener">宁诺校团委</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺研究生联合会" target="_blank" rel="noopener">宁诺研究生联合会</a></p><h3 id="社团"><a href="#社团" class="headerlink" title="社团"></a>社团</h3><p><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=CIMA_UNNC" target="_blank" rel="noopener">CIMA_UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=DiversityUNNC" target="_blank" rel="noopener">DiversityUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=FashionSociety" target="_blank" rel="noopener">FashionSociety</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Ningbo U.F.O" target="_blank" rel="noopener">Ningbo U.F.O</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NottinGreen" target="_blank" rel="noopener">NottinGreen</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=MUNAUNNC" target="_blank" rel="noopener">MUNA · UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=RANGERUNNC" target="_blank" rel="noopener">RANGERUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=TEDxUNNC" target="_blank" rel="noopener">TEDxUNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=TEP" target="_blank" rel="noopener">TEP</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=TK199" target="_blank" rel="noopener">TK199</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=unnc 开拓者" target="_blank" rel="noopener">unnc 开拓者</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁记Nottingzine" target="_blank" rel="noopener">诺丁记Nottingzine</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCBoardGameClub" target="_blank" rel="noopener">UNNCBoardGameClub</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCKartingo" target="_blank" rel="noopener">UNNCKartingo</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCKoreansociety" target="_blank" rel="noopener">UNNCKoreansociety</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCFilmAssociation" target="_blank" rel="noopener">UNNCFilmAssociation</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCPhotography" target="_blank" rel="noopener">UNNCPhotography</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCSA" target="_blank" rel="noopener">UNNCSA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC爱中华文化社" target="_blank" rel="noopener">UNNC爱中华文化社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC壁球社" target="_blank" rel="noopener">UNNC壁球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC丶Magic丶Society" target="_blank" rel="noopener">UNNC丶Magic丶Society</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC动漫社" target="_blank" rel="noopener">UNNC动漫社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC国球社" target="_blank" rel="noopener">UNNC国球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC合气道社团" target="_blank" rel="noopener">UNNC合气道社团</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC剑道社" target="_blank" rel="noopener">UNNC剑道社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC口才与演讲社" target="_blank" rel="noopener">UNNC口才与演讲社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC篮球社" target="_blank" rel="noopener">UNNC篮球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC轮滑社" target="_blank" rel="noopener">UNNC轮滑社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC魔幻厨房社" target="_blank" rel="noopener">UNNC魔幻厨房社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC诺宁平安" target="_blank" rel="noopener">UNNC诺宁平安</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC棋社" target="_blank" rel="noopener">UNNC棋社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC拳击社" target="_blank" rel="noopener">UNNC拳击社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC日语交流社ACT2" target="_blank" rel="noopener">UNNC日语交流社ACT2</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC商英社" target="_blank" rel="noopener">UNNC商英社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC书画社" target="_blank" rel="noopener">UNNC书画社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC书友会" target="_blank" rel="noopener">UNNC书友会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC跆拳道社" target="_blank" rel="noopener">UNNC跆拳道社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC天协" target="_blank" rel="noopener">UNNC天协</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC现视研" target="_blank" rel="noopener">UNNC现视研</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC小吉他社" target="_blank" rel="noopener">UNNC小吉他社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC音乐协会" target="_blank" rel="noopener">UNNC音乐协会</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC羽毛球社" target="_blank" rel="noopener">UNNC羽毛球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC中文辩论社" target="_blank" rel="noopener">UNNC中文辩论社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=unnc中文角" target="_blank" rel="noopener">unnc中文角</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC足球社" target="_blank" rel="noopener">UNNC足球社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=艾话剧社idrama" target="_blank" rel="noopener">艾话剧社idrama</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=壁球社UNNC" target="_blank" rel="noopener">壁球社UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=魔方社UNNC" target="_blank" rel="noopener">魔方社UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC旅游" target="_blank" rel="noopener">UNNC旅游</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC_PA" target="_blank" rel="noopener">UNNC_PA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCAIR" target="_blank" rel="noopener">UNNCAIR</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺DIY" target="_blank" rel="noopener">宁诺DIY</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺ESA" target="_blank" rel="noopener">宁诺ESA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺PRA" target="_blank" rel="noopener">宁诺PRA</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺IMA学术平台" target="_blank" rel="noopener">宁诺IMA学术平台</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=insightTALK" target="_blank" rel="noopener">insightTALK</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NDUC_UNNC" target="_blank" rel="noopener">NDUC_UNNC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCDBC" target="_blank" rel="noopener">UNNCDBC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNCHolmes" target="_blank" rel="noopener">UNNCHolmes</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁汉排球" target="_blank" rel="noopener">诺丁汉排球</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺智力谜题联盟" target="_blank" rel="noopener">宁诺智力谜题联盟</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁SHARE" target="_blank" rel="noopener">诺丁SHARE</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=诺丁汉WEAVER" target="_blank" rel="noopener">诺丁汉WEAVER</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=职来职往 宁诺职协" target="_blank" rel="noopener">职来职往 宁诺职协</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺CPU" target="_blank" rel="noopener">宁诺CPU</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺滑板俱乐部" target="_blank" rel="noopener">宁诺滑板俱乐部</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=宁诺健身社" target="_blank" rel="noopener">宁诺健身社</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=NPCC" target="_blank" rel="noopener">NPCC</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=UNNC万科俱乐部" target="_blank" rel="noopener">UNNC万科俱乐部</a><br><a href="http://weixin.sogou.com/weixin?type=1&amp;s_from=input&amp;query=Adventure-Sports" target="_blank" rel="noopener">CANN</a></p><h1 id="一些想说的"><a href="#一些想说的" class="headerlink" title="一些想说的"></a>一些想说的</h1><p>我们做这个东西，并没有和任何人去做过什么营销，目的在于方便UNNCer查阅UNNC-related的微信公众号。在公众号的挑选过程中，商业营销号我们是第一个避免的，如果漏掉了你所在的团体，而且你所在的团体的确有其价值，请通过下面的联系方式联系我们。</p><h1 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h1><p>Email: <a href="mailto://breakertt@outlook.com">breakertt@outlook.com</a><br>欢迎报错</p>]]></content>
      
      
      <categories>
          
          <category> MiuNottingham </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改(二次开发)FaceNet为己用 - 我的人脸识别学习笔记03 - 完结篇</title>
      <link href="/2018/06/22/face_recognition_03/"/>
      <url>/2018/06/22/face_recognition_03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>魔改即是正义！</p><a id="more"></a>    <div id="aplayer-TgmNutwP" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="474574924" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p><em>本文写于年轻人(也就是我)的第一次加班(谁让我在下班前开始了神经网络的训练呢)</em></p><p>我的魔改成果 <a href="https://github.com/imaginebreake/face_recognition_with_TCPsocket" target="_blank" rel="noopener">face_recognition_with_TCPsocket</a><br>顺便上个逻辑图 <img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0621/FRWTS.png" alt="None"></p><h2 id="寻找志同道合者并沆瀣一气-不是"><a href="#寻找志同道合者并沆瀣一气-不是" class="headerlink" title="寻找志同道合者并沆瀣一气(不是"></a>寻找志同道合者并沆瀣一气(不是</h2><p>根据学习笔记02，我已经对FaceNet的使用有了初步的了解。FaceNet自带的Demo用来做人脸数据库并识别人脸已经是很完善的了，所以需要做的改动并没有想象的那么多。我第一步要达到的是能在本地提取一个人并输入照片的时候可以返回框出人脸并带上人名的图像，基于这个目的，我去Github上搜索了一些同样是基于FaceNet二次开发的项目。</p><p>首先找到的是shanren7的一个实时人脸识别的项目，这个项目和我需要的基本一致，但是问题有二:</p><ol><li>只能输出一个人QAQ</li><li>用的预训练模型并不是davidsandberg/facenet内提供的</li></ol><p>然后我继续寻找，找到了借鉴了shanren7项目开发的另一个项目<a href="https://github.com/bearsprogrammer/real-time-deep-face-recognition/" target="_blank" rel="noopener">bearsprogrammer/real-time-deep-face-recognition</a>.这个项目正好解决了前一个提到的两个问题，但是同时也出现了一些其他的问题.</p><ol><li>开发者用Python程序内定义好的list来储存人名，要实时更新并不方便。</li><li>这个系统是纯本地的，但是我要做的系统是可以远程训练和识别的。</li></ol><p>其中问题一其实只是一个小问题，很快就能搞定；而问题二基本上是开发一个新功能了，工作量比较大，也摸了好几天。</p><p>需要一提的是，这两个项目的主要的Detect的程序也是由FaceNet的demo修改而来。</p><p>那接下来就来对这个项目进行进一步的开发！</p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>对于问题一的解决，在数据量不大的时候最好的方案就是把这个list单独搞一个文本文件，在每次识别的时候读取为list(数据量上去就要用数据库了)。选择有两个，json和csv，因为我这个字段只有一个编号和人名，用csv比较清爽所以就这么决定了。Python对csv的调用非常简单了，代码如下:</p><p><strong>读取</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"./models/human_name.csv"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    human_name_reader = csv.reader(f)</span><br><span class="line">    HumanNames = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> human_name_reader]</span><br><span class="line">    <span class="keyword">del</span> HumanNames[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br><strong>追加</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"./models/human_name.csv"</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str(count).zfill(<span class="number">6</span>) + <span class="string">","</span> + name + <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><br>问题一就这样解决了!</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="远程检测"><a href="#远程检测" class="headerlink" title="远程检测"></a>远程检测</h3><p>在我把问题一解决之后，老板说:那你给这个项目加个Socket，然后我就一脸懵逼:Socket是啥???然后我就去百度了一波。Socket其实是一种对TCP/IP的封装，要给我的项目加上Socket，也就是加上通过网络检测和训练的功能。C我是不太熟的，Python也有现成的Socket库，那就用Python了。<br>关于Python上Socket的编写，我很大程度上参考了简书上的<a href="https://www.jianshu.com/p/2a4b859e05df" target="_blank" rel="noopener">一篇文章</a>,同样都是传输图像。<br>啃了一个下午，总算是把检测部分的代码搞了出来，并在本机检测通过，中间有几个我觉得值得一提的小波折。</p><p>1.图像文件之后发送过去之后,文件体积一致,但是文件头里面多了一些之前的传输信息,花了一个小时debug总算是找到了问题所在。<br><strong>修改前</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = sock.recv(SIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data :</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'reach the end of file'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> data == <span class="string">'begin to send'</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'create file'</span></span><br><span class="line">        checkFile()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br></pre></td></tr></table></figure><br><strong>修改后</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = connection.recv(SIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data :</span><br><span class="line">        print(<span class="string">"reach the end of file"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> data == <span class="string">'begin to send'</span>:</span><br><span class="line">        print(<span class="string">"create file"</span>)</span><br><span class="line">        checkFile()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./mydataset/test/test.jpg"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br></pre></td></tr></table></figure><br>问题就在于没有对socket接收的缓存数据进行清空</p><p>2.Ubuntu的防火墙:要现在本机的防火墙上先开放要使用的端口</p><p>本机测试通过了,我就开始拿笔记本远程调试,中间出现了一些因为python版本导致的问题，就不具体说了，<a href="https://blog.csdn.net/yexiaohhjk/article/details/68066843" target="_blank" rel="noopener">请看此</a>,解决这个问题之后程序跑的十分顺利。</p><h3 id="远程登记人脸"><a href="#远程登记人脸" class="headerlink" title="远程登记人脸"></a>远程登记人脸</h3><p>我的想法是调用电脑的摄像头存下一系列照片然后打包成.zip发送给服务器，然后进行人脸对齐和特征的储存。中间基本上没遇到什么太大的问题。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>之前无论哪个操作，服务器端都是直接用Python调用命令，这样每次都是要重新打开一个TensorFlow的Session，耗时很不乐观。所以我决定人脸检测这部分一直使用同一个Session，训练的时候再重开另一个Session。<br>这样就会出现一个问题，就是每次人脸登记完之后要重新加载包含人名的.csv和包含人脸特征的.pkls,所以我在代码中添加了一个update的变量让程序知道是否要重新加载。<br>为了更好的交互，我第一次接触了Visual Studio并配好了Opencv，步履维艰的写下了自己人生中第一个C++程序，想必以后还有的是打交道的机会。这个C++的控制台小程序可以调用client_dete.py和client_train.py。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><a href="https://github.com/imaginebreake" target="_blank" rel="noopener">Github</a>里面总算是有了个不少是自己写的代码的项目，完结撒花！</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ol><li><a href="https://github.com/shanren7/real_time_face_recognition" target="_blank" rel="noopener">shanren7/real_time_face_recognition</a></li><li><a href="https://github.com/bearsprogrammer/real-time-deep-face-recognition/" target="_blank" rel="noopener">bearsprogrammer/real-time-deep-face-recognition</a></li><li><a href="https://blog.csdn.net/Pk_zsq/article/details/6087367" target="_blank" rel="noopener">TCP/IP、Http、Socket的区别</a></li><li><a href="https://www.jianshu.com/p/2a4b859e05df" target="_blank" rel="noopener">[毕设记录] python利用socket进行文件传输</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FaceNet使用记录 - 我的人脸识别学习笔记02</title>
      <link href="/2018/06/19/face_recognition_02/"/>
      <url>/2018/06/19/face_recognition_02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>即使是用别人的东西也花了好大的气力。</p><a id="more"></a><p>首先贴上FaceNet的github <a href="https://github.com/davidsandberg/facenet" target="_blank" rel="noopener">davidsandberg/facenet</a> <a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schroff_FaceNet_A_Unified_2015_CVPR_paper.pdf" target="_blank" rel="noopener">论文</a></p><h2 id="为什么是FaceNet"><a href="#为什么是FaceNet" class="headerlink" title="为什么是FaceNet?"></a>为什么是FaceNet?</h2><ol><li>机器环境<br>老板给的机器已经配好了 TensorFlow + Cuda, FaceNet所需的环境正好是这个 √</li><li>社区资源<br>Github上使用FaceNet进行二次开发的样例非常多<br>例如:<a href="https://github.com/shanren7/real_time_face_recognition" target="_blank" rel="noopener">shanren7</a> <a href="https://github.com/bearsprogrammer/real-time-deep-face-recognition/" target="_blank" rel="noopener">bearsprogrammer</a></li><li>识别率和预处理模型的提供<br>FaceNet提供的预处理模型在LFW测试数据集上的准确度已经达到了99.65%,并且提供了分别以 CASIA-WebFace 和 VGGFace2 为训练集的预处理模型.</li><li>功能性<br>人脸识别主要有两块，一个是对脸的识别，另一个是对人物的ID的识别.FaceNet在这两个功能上都有很好的完成度</li></ol><h2 id="FaceNet的基本使用-此节主要借鉴facenet的wiki"><a href="#FaceNet的基本使用-此节主要借鉴facenet的wiki" class="headerlink" title="FaceNet的基本使用(此节主要借鉴facenet的wiki)"></a>FaceNet的基本使用(此节主要借鉴facenet的<a href="https://github.com/davidsandberg/facenet/wiki/Train-a-classifier-on-own-images" target="_blank" rel="noopener">wiki</a>)</h2><p>此处已经默认装好了相关Python库以及Tensorflow</p><h3 id="1-克隆-FaceNet-的-Github-库"><a href="#1-克隆-FaceNet-的-Github-库" class="headerlink" title="1. 克隆 FaceNet 的 Github 库"></a>1. 克隆 FaceNet 的 Github 库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/davidsandberg/facenet.git</span><br></pre></td></tr></table></figure><h3 id="2-比对两个人脸的欧式距离"><a href="#2-比对两个人脸的欧式距离" class="headerlink" title="2. 比对两个人脸的欧式距离"></a>2. 比对两个人脸的欧式距离</h3><p>FaceNet是采用CNN神经网络将人脸图像映射到128维的欧几里得空间，我们可以根据两幅人像的欧几里得距离去判断两个人像的相似程度。两个人像之间的欧几里得距离越近，说明它们越相似。一般欧式距离小于1,就可以认为是同一个人。<br><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0619/999009-20170305161101282-1344836451.png" alt="None"><br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python compare.py models\<span class="number">20170511</span><span class="literal">-185253</span>\<span class="number">20170511</span><span class="literal">-185253</span> Cate_Blanchett_0001.png  Cate_Blanchett_0002.png</span><br></pre></td></tr></table></figure></p><h3 id="3-训练自己的数据"><a href="#3-训练自己的数据" class="headerlink" title="3. 训练自己的数据"></a>3. 训练自己的数据</h3><h4 id="训练集的结构"><a href="#训练集的结构" class="headerlink" title="训练集的结构"></a>训练集的结构</h4><p>训练集的结构如下，每个人都有独立的文件夹<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Aaron_Eckhart_0001.jpg</span><br><span class="line"></span><br><span class="line">Aaron_Guiel</span><br><span class="line">    Aaron_Guiel_0001.jpg</span><br><span class="line"></span><br><span class="line">Aaron_Patterson</span><br><span class="line">    Aaron_Patterson_0001.jpg</span><br><span class="line"></span><br><span class="line">Aaron_Peirsol</span><br><span class="line">    Aaron_Peirsol_0001.jpg</span><br><span class="line">    Aaron_Peirsol_0002.jpg</span><br><span class="line">    Aaron_Peirsol_0003.jpg</span><br><span class="line">    Aaron_Peirsol_0004.jpg</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><h4 id="剪切出人脸"><a href="#剪切出人脸" class="headerlink" title="剪切出人脸"></a>剪切出人脸</h4><p>FaceNet 提供了使用 MTCNN 对齐人脸的脚本 代码如下<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python src/align/align_dataset_mtcnn.py \</span><br><span class="line">~/datasets/my_dataset/origin \</span><br><span class="line">~/datasets/my_dataset/train \</span><br><span class="line">-<span class="literal">-image_size</span> <span class="number">182</span> \</span><br><span class="line">-<span class="literal">-margin</span> <span class="number">44</span></span><br></pre></td></tr></table></figure><br>加速多线程版：<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> N <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">4</span>&#125;; <span class="keyword">do</span> \</span><br><span class="line">python src/align/align_dataset_mtcnn.py \</span><br><span class="line">~/datasets/my_dataset/origin \</span><br><span class="line">~/datasets/my_dataset/train \</span><br><span class="line">-<span class="literal">-image_size</span> <span class="number">182</span> \</span><br><span class="line">-<span class="literal">-margin</span> <span class="number">44</span> \</span><br><span class="line">-<span class="literal">-random_order</span> \</span><br><span class="line">-<span class="literal">-gpu_memory_fraction</span> <span class="number">0.25</span> \</span><br><span class="line">&amp; done</span><br></pre></td></tr></table></figure></p><h4 id="训练-pkl"><a href="#训练-pkl" class="headerlink" title="训练.pkl"></a>训练.pkl</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python src/classifier.py TRAIN ~/datasets/my_dataset/train/ ~/models/model<span class="literal">-20170216</span><span class="literal">-091149</span>.pb ~/models/my_classifier.pkl -<span class="literal">-batch_size</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python src/classifier.py CLASSIFY ~/datasets/my_dataset/test/ ~/models/model<span class="literal">-20170216</span><span class="literal">-091149</span>.pb ~/models/my_classifier.pkl -<span class="literal">-batch_size</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>既然已经大概了解FaceNet怎么用了，就要开始真正的魔改应用之路了！下回见分晓。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/24837264" target="_blank" rel="noopener">谷歌人脸识别系统FaceNet解析</a></li><li><a href="https://blog.csdn.net/u013044310/article/details/79556099" target="_blank" rel="noopener">史上最全的FaceNet源码使用方法和讲解（一）（附预训练模型下载）</a></li><li><a href="https://blog.csdn.net/xingwei_09/article/details/79161931" target="_blank" rel="noopener">人脸识别（Facenet）</a></li><li><a href="https://www.cnblogs.com/xiaohuahua108/p/6505756.html" target="_blank" rel="noopener">FaceNet—深度学习与人脸识别的二次结合</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人脸识别的神经网络了解一下啦 - 我的人脸识别学习笔记01</title>
      <link href="/2018/06/07/face_recognition_01/"/>
      <url>/2018/06/07/face_recognition_01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>面向谷歌、百度、github、Stackoverflow编程</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想了一想，离高考结束也已经一年零几天了。在水校的一年也并没有学到什么，算是又荒废了一年光阴。因此决定建一个博客，督促自己不断学习而非继续碌碌无为。</p><p>期末考试大概是5月25日考完的，在家休息了大概一个星期之后，终于来到了实习单位，之前也略闻过计算机行业的办公方式，但亲眼看见却又是另外一种感觉了。实习是从6月4日开始的，到了boss便让我去了解一下人脸识别和神经网络方面的东西，特别指出了Faster R-CNN什么的，当然至今还是云里雾里。</p><p>既然老板让我去看，我便花了一个早上去看这是个什么东西。<br>要了解Faster R-CNN,还是要从图像识别和分类技术发展的祖先一步步来：<br><strong>CNN→R-CNN→Fast R-CNN→Faster R-CNN</strong></p><h2 id="一些神经网络"><a href="#一些神经网络" class="headerlink" title="一些神经网络"></a>一些神经网络</h2><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><p>CNN(ConvNet/卷积神经网络)是图像识别的初代算法，主要操作有以下几个，若想详细的了解，可以直接拉到最下看参考.<br>在我这个只了解一下理论暂不实践的半吊子看来主要有以下几步</p><ul><li><strong>卷积</strong> 也就是用不同滤波器对图像进行特征提取<img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200314000428.gif" alt="None"></li><li><strong>ReLU</strong> ReLU很操作很容易理解 就是把图像里面的每个像素的值范围进行再一次的框定 但是为什么要这么操作我至今也是一知半解</li><li><strong>池化</strong> 我的理解是对上一个卷积层的图像进行Downscale<img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/20200314000459.png" alt=""></li><li><strong>全连接层/多层感知器</strong> 组合多个层获得神经网络，这块是我最不懂的，至今毫无头绪</li><li><strong>无尽重复！</strong></li></ul><h3 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h3><p>R是Regions，从现在开始我们不仅可以知道这图片有啥，更能知道图片里面的东西位置在哪里了。<br>那么是如何做到的呢？</p><ul><li><strong>寻找候选框</strong> 对图片进行滑动窗口操作获得潜在的正确答案</li><li><strong>CNN</strong> 输入CNN神经网络，得到输出</li><li><strong>分类与边界回归</strong> 先得到正确的区域，显然正确答案会有很多种，所以我们需要边界回归，得到最终的精确答案<br><img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0614/RCNN.png" alt=""></li></ul><p>事情很显然了，这样既浪费空间又浪费时间又浪费算力。</p><h3 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h3><p>其实这之前还有个SSP-Net，优点 1.多尺度输入图像 2.一次CNN，然后再去找正确答案。<br>然后整合了一些流程，具体的我也并没有非常明白，因为没有用tensorflow实实在在造过这个轮子。</p><h3 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h3><p>速度的问题其实还是在于选框上，所以干脆把选框也交给CNN，这就是Faster R-CNN了</p><h3 id="MTCNN"><a href="#MTCNN" class="headerlink" title="MTCNN"></a>MTCNN</h3><p>但是我要做的是人脸检测，目前人脸检测用的最多的还是MTCNN(OpenFace,FaceNet),和前面几个算法对于人脸进行了再次优化，算法流程如下。<img src="https://raw.githubusercontent.com/imaginebreake/imaginebreake.github.io/pic/2018/0614/20170817161936858.jpg" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这便是我实习第一天看的东西了。<br>但是呢理解往往是相对容易的，但操作起来是举步维艰的。<br>如果是从头造轮子，我的数学以及编程功力都没到位，希望能在两年后的现在有这个能力吧。<br>因此我决定识别和模型搭建这块先用谷歌开源的FaceNet以及其提供的预处理算法开完成老板给我的任务，老板也表示了同意。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><p>1.<a href="https://blog.csdn.net/ruiyiin/article/details/77113973" target="_blank" rel="noopener">见过最好的神经网络CNN解释</a><br>2.<a href="https://blog.csdn.net/xyfengbo/article/details/70227173" target="_blank" rel="noopener">RCNN介绍</a><br>3.<a href="https://www.cnblogs.com/skyfsm/p/6806246.html" target="_blank" rel="noopener">基于深度学习的目标检测技术演进：R-CNN、Fast R-CNN、Faster R-CNN</a><br>4.<a href="https://blog.csdn.net/tinyzhao/article/details/53236191" target="_blank" rel="noopener">人脸检测：MTCNN</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
